[{"content":"","date":"5 June 2025","externalUrl":null,"permalink":"/","section":"GodKe.BLOG","summary":"","title":"GodKe.BLOG","type":"page"},{"content":"","date":"5 June 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" Hugo # ","date":"5 June 2025","externalUrl":null,"permalink":"/posts/website/move-to-hugo/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eHugo \n    \u003cdiv id=\"hugo\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hugo\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e","title":"Move to Hugo","type":"posts"},{"content":"","date":"5 June 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"5 June 2025","externalUrl":null,"permalink":"/categories/website/","section":"Categories","summary":"","title":"Website","type":"categories"},{"content":"","date":"5 June 2024","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","date":"5 June 2024","externalUrl":null,"permalink":"/series/oldwebsite/","section":"Series","summary":"","title":"OldWebsite","type":"series"},{"content":"","date":"5 June 2024","externalUrl":null,"permalink":"/tags/web/","section":"Tags","summary":"","title":"Web","type":"tags"},{"content":"众所周知啊，现在的浏览器对没有SSL证书的网站都是直接报不安全的，像华为和一些软件的内置浏览器直接就禁止访问了，所以要给网站加自定义域名，就得给域名申请一个SSL证书\nGitHub pages很好地迎合了这个需求，和Let\u0026rsquo;s Encrypt合作，可以免费为GitHub pages的自定义域名申请证书并自动续费，但是前提是域名必须直接指向GitHub的服务器\n也就是说GitHub只有确定了你的域名真的是给GitHub pages用的，才会为你申请证书\n但是当我们把域名挂到cloudflare上后，因为cloudflare提供了一层cdn服务，所以如果查dns，查到的是cloudflare的cdn服务器ip，这就导致GitHub不认了，于是证书申请不下来，一直卡着 可以在powershell里使用命令nslookup \u0026lt;url\u0026gt;查询dns\n去搜索了一下，根据前人的经验GitHub Pages HTTPS证书自动签发错误解决 | Heary\u0026rsquo;s Blog 目前有两种解决方案\n一是直接取消cloudflare与GitHub间的SSL，反正用户是通过cloudflare的中介访问网站，用户到cloudflare总是有SSL证书的，只是cloudflare访问GitHub没有证书，用http其实也无伤大雅 二是关闭cloudflare的cdn加速，让GitHub成功申请 前人的博客中提供了一种方案，经检验大概是可行的，dns查询确实没问题了，但是半天申请也没通过\n但是实际上不需要这么多操作，cloudflare似乎也没有一键关闭代理，一通操作麻烦得很\n因为我们是在namesilo买的域名，而namesilo提供免费的dns服务，所以我们直接去namesilo把dns解析服务商先改了，等十分钟再去申请，几乎马上就通过了，然后再把dns服务商改回cloudflare就好\n这一招偷梁换柱非常方便，只是证书只有3个月，每三个月都得花点时间申请，有点难绷\n","date":"5 June 2024","externalUrl":null,"permalink":"/posts/website/old/web-08-ssl%E8%AF%81%E4%B9%A6%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/","section":"Posts","summary":"\u003cp\u003e众所周知啊，现在的浏览器对没有SSL证书的网站都是直接报不安全的，像华为和一些软件的内置浏览器直接就禁止访问了，所以要给网站加自定义域名，就得给域名申请一个SSL证书\u003c/p\u003e","title":"web-08 SSL证书问题处理","type":"posts"},{"content":"","date":"3 June 2024","externalUrl":null,"permalink":"/tags/crack/","section":"Tags","summary":"","title":"Crack","type":"tags"},{"content":"","date":"3 June 2024","externalUrl":null,"permalink":"/categories/tech/","section":"Categories","summary":"","title":"Tech","type":"categories"},{"content":"俗话说，色色是宅男的第一生产力，当你看到游戏里有好看的色图时，第一反应肯定是想把它保存下来，以备后续“细细品鉴”，但是很多游戏就是喜欢搞点东西不让你保存，就算是用万能的截图大法也要给你放点游戏UI挡视野，这时候就只能解包了\n过去游戏解包非常的公式化，只要搞清楚了打包的加密方式就行，但是这次的吊人属实狠，直接把原图都给加密了，虽然把包给解了，但是包里面还有一层加密，属实是恶心至极\n必须干他一炮\n解开包以后发现img文件夹里全是sff文件，这文件搜了一下，也就mugen相关的能和图搭上关系，其他的简直八竿子打不着，先试着改改后缀名碰碰运气，只可惜运气不好\n这下必须上狠招了，直接看文件的magic number\n魔数居然是TJC，这完全不是正常文件的魔数，到魔数表里一查，根本没这个东西\nFile Signatures (garykessler.net)\n这就有点头痛了，毕竟完全不知道是怎么加密来的，不过大概率不会是很恶心的加密，因为游戏使用这个数据的时候还要自己解码一遍，估计就是个很简单的加密\n先把前面的二进制直接放进搜索引擎试试\n居然发现了一个有趣的东西\n打脸：看我如何用3天时间黑掉“网秦私密空间（NQ Vault）”-茶余饭后-看雪-安全社区|安全招聘|kanxue.com\n可以看到PNG文件的魔数加密后恰好就是这个魔数，简直一模一样，于是我们可以确定这就是从PNG文件加密来的文件，还恶意改了个后缀名防破解\n这下故事就简单了，知道了加密数据和原数据，得到加密方式简直无比简单，逆向就更简单了\n而且这个文件后续的一堆数据都是0x04，众所周知，图片文件中无色一般都是用0x00表示的，所以掩码就是0x04\n直接二进制破解，使用C加速，毕竟是逐字节运算\n//cracker #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { FILE *source, *cracked; int chara; source = fopen(\u0026#34;0.sff\u0026#34;, \u0026#34;rb\u0026#34;); cracked = fopen(\u0026#34;0.png\u0026#34;, \u0026#34;wb\u0026#34;); while ((chara = fgetc(source)) != EOF) fputc(chara ^ 0x4, cracked); fclose(source); fclose(cracked); return EXIT_SUCCESS; } 解码后打开，图片正常显示，成功解决\n原本写个脚本提取所有sff文件批处理即可，但是最近发现powertoys里有一个很方便的可以展开全部文件夹的功能，我们直接把解包后的所有数据展开到一个文件夹里，然后按后缀名排序就能找到全部图片资源\n提取所有文件后，再把想要的用power rename全部改成简单的数列名称，简单使用c代码处理就好\nPS：解散后一共3900个文件，这代码构造属实离谱，估计是直接生成的\n总的来说真正的难度还是在于解包，毕竟游戏运行时加密文件是要解密使用的，必然不会用很恶心的加密方式\n也就挡挡普通人了\n色图太色，放出来有伤风化\n","date":"3 June 2024","externalUrl":null,"permalink":"/posts/tech/%E7%A0%B4%E8%A7%A3%E6%B8%B8%E6%88%8F%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86/","section":"Posts","summary":"\u003cp\u003e俗话说，色色是宅男的第一生产力，当你看到游戏里有好看的色图时，第一反应肯定是想把它保存下来，以备后续“细细品鉴”，但是很多游戏就是喜欢搞点东西不让你保存，就算是用万能的截图大法也要给你放点游戏UI挡视野，这时候就只能解包了\u003cbr\u003e\n过去游戏解包非常的公式化，只要搞清楚了打包的加密方式就行，但是这次的吊人属实狠，直接把原图都给加密了，虽然把包给解了，但是包里面还有一层加密，属实是恶心至极\u003cbr\u003e\n必须干他一炮\u003c/p\u003e","title":"破解游戏文件加密","type":"posts"},{"content":"最近想看周次，然后发现这小说现在似乎比较新，文库版还在出，找了半天勉强找到一二卷的台版，后面都没出版，肯定是没希望了，只好跑去猪先生给的百合会帖子下看\n这帖子说好也好，说不好真是问题一堆 首先就是我的手机端上似乎不显示目录，只能看评论区一个一个来，调成PC模式又唐得一批，字还小，只好到电脑上看，结果发现电脑上一样唐\n虽然它善良地把所有内容做到了一个网页上，还给了个目录，但是这个目录实在是太长了，每次想要跳到下一个episode都要划半天屏幕或者鼠标滚轮，麻烦得一批，所以最后还是考虑直接爬下来算了，反正自己最近也在玩爬虫，顺便搞搞复杂一点的\n首先这个网页的特性非常奇怪，众所周知的是网页一般点击一个按钮就会跳转到某个新的网页，或者以某种方式刷新一次，传给你一个新的网页，但是如果你点击这个网页的按钮来切换章节，就会发现这个网页的本体完全没有更新，只是部分元素更新了\n这一点有点熟悉，之前捣鼓自己网站的时候就有尝试一个技术栈，就是让网站到处跳转的时候只更新必要更新的内容，而现成的架构就是ajax，可以通过编写专门的方案控制网站元素更新\n当时我的想法就是文章间跳转只更新文章的内容和标题，以及刷新评论区，只可惜这个吊东西bug太多，写多了容易导致css不工作，整个网页的动画就会卡bug，没想到我想做的东西在这个网站复现了\n传统网页好爬是因为只要相应的修改域名，就可以直接get，但是这个网站如果用域名爬，永远都只能爬到第一个episode，而且你使用按钮切换章节后，域名是不变的，只是展示给你的东西变了\n打开网页进行调试，不出所料地看到了ajax的get申请 因为ajax申请返回的东西就是网页变化的东西，也就是我们需要的小说的正文，所以其实不用每次都调取ajax-get后再爬取网页，直接把ajax返回的东西爬下来反而更方便\n根据约定，ajax-get是xhr请求，直接去网络调试把请求抓下来就行 可以看到请求url里有post的id，也就是这个帖子的id，还有一个viewpid，这个就是当前展示页面的id 多尝试几次就会发现viewpid是唯一变化的东西，而且这个viewpid是根据更新时间来编号的 前两个episode的viewpid一个等于post的id，一个等于post的id加1，后面的加的更多，因为更新后viewpid会改变\n虽然我们无法直接依次轮询viewpid来爬取，但是这个viewpid很好找 因为就一般逻辑而言，viewpid肯定在按钮上保存了一份，不然就不知道按按钮更新什么\n查看目录元素，可以看到一堆viewpid 我们直接把整个目录元素复制下来，然后提取pid就行 使用代码\n# 正则表达式提取viewpid template = r\u0026#34;viewpid=\\d{8}\u0026#34; viewpid = re.findall(template, dic) # dic即为目录元素 然后就是熟悉的破解网站的反爬虫机制 目前来看只要请求不要太快好像完全没有反爬 伪装一下headers就行，UA和cookies设置好似乎就没有问题了，其他的都不检查\n# 获取请求header，主要是ua和cookie headers = { \u0026#39;Accept\u0026#39; : \u0026#39;*/*\u0026#39;, \u0026#39;Accept-Encoding\u0026#39; : \u0026#39;gzip, deflate, br, zstd\u0026#39;, \u0026#39;Accept-Language\u0026#39; : \u0026#39;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,en-GB;q=0.6\u0026#39;, \u0026#39;Cookie\u0026#39; : \u0026lt;你的cookies\u0026gt; \u0026#39;User-Agent\u0026#39; : \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0\u0026#39; } 之后就是熟悉的分析爬到的东西了 ajax的get申请返回的东西其实挺规整的，因为ajax框架有严格的格式要求，必须声明需要更新的部分 但是这个作者的文章格式一团糟，完全没有章法，最后只能原封不动copy下来了\n两个定位器都是ajax的固有内容\n# 直接检索并提取内容 head = r\u0026#34;\u0026#34;\u0026#34;id=\u0026#34;postmessage_\u0026#34;\u0026#34;\u0026#34; tail = r\u0026#34;\u0026#34;\u0026#34;id=\u0026#34;comment_\u0026#34;\u0026#34;\u0026#34; 然后就是简单的循环，读写，处理标题，整个文本格式化啥的，轻车熟路 后续维护直接修改循环的开头就行，反正是apend模式\n最后爬下来的东西和项目在 GodKeawa/zhouci: 一周一次买下同班同学的那些事 (github.com) tips: 现已设置为 private\n源代码\n# coding: utf-8 import requests as r import re import time # 直接从浏览器提取目录元素 dic = \u0026#34;\u0026#34;\u0026#34;\u0026lt;目录元素的全部内容\u0026gt;\u0026#34;\u0026#34;\u0026#34; # 获取请求header，主要是ua和cookie headers = { \u0026#39;Accept\u0026#39; : \u0026#39;*/*\u0026#39;, \u0026#39;Accept-Encoding\u0026#39; : \u0026#39;gzip, deflate, br, zstd\u0026#39;, \u0026#39;Accept-Language\u0026#39; : \u0026#39;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,en-GB;q=0.6\u0026#39;, \u0026#39;Cookie\u0026#39; : \u0026lt;你的cookies\u0026gt;, \u0026#39;User-Agent\u0026#39; : \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36 Edg/124.0.0.0\u0026#39; } # 正则表达式提取viewpid template = r\u0026#34;viewpid=\\d{8}\u0026#34; viewpid = re.findall(template, dic) # dic即为目录元素 # 直接检索并提取内容 head = r\u0026#34;\u0026#34;\u0026#34;id=\u0026#34;postmessage_\u0026#34;\u0026#34;\u0026#34; tail = r\u0026#34;\u0026#34;\u0026#34;id=\u0026#34;comment_\u0026#34;\u0026#34;\u0026#34; novel = open(\u0026#34;novel.txt\u0026#34;, \u0026#34;a\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) # 设置标题 title1 = r\u0026#34;Episode \\d*\u0026#34; title2 = r\u0026#34;episode \\d*\u0026#34; # 循环获取 # 后续维护只要修改range的参数即可 for i in range(0,len(viewpid)): # 重构url url = \u0026#34;https://bbs.yamibo.com/forum.php?mod=viewthread\u0026amp;threadindex=yes\u0026amp;tid=521519\u0026amp;\u0026#34; + viewpid[i] + \u0026#34;\u0026amp;inajax=1\u0026amp;ajaxtarget=post_40213901\u0026#34; # 发送请求 count = 0 while (True): # 循环请求 try: response = r.get(url=url, headers=headers) break except: count += 1 if (count == 3): # 事不过三 print(\u0026#34;error\u0026#34;) break time.sleep(5) continue print(\u0026#34;success\u0026#34; + str(i)) # 处理获取到的内容 with open(\u0026#34;temp.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: f.write(response.text) with open(\u0026#34;temp.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: text = f.read() # 定位正文 head_index = text.find(head) + 26 tail_index = text.find(tail) - 35 rawtext = text[head_index:tail_index] # 设置标题 if rawtext.find(\u0026#34;Episode\u0026#34;) != -1: rawtext = re.sub(title1, \u0026#34;\u0026lt;h2\u0026gt;Episode \u0026#34;+str(i)+\u0026#34;\u0026lt;/h2\u0026gt;\u0026#34;, rawtext) if rawtext.find(\u0026#34;episode\u0026#34;) != -1: rawtext = re.sub(title2, \u0026#34;\u0026lt;h2\u0026gt;Episode \u0026#34;+str(i)+\u0026#34;\u0026lt;/h2\u0026gt;\u0026#34;, rawtext) # 写入文件 novel.write(rawtext) time.sleep(10) # 休眠10s,短一点也没事 novel.close() print(\u0026#34;finished\u0026#34;) ","date":"24 April 2024","externalUrl":null,"permalink":"/posts/tech/ajax%E7%BD%91%E7%AB%99%E8%B5%84%E6%BA%90%E7%88%AC%E5%8F%96/","section":"Posts","summary":"\u003cp\u003e最近想看周次，然后发现这小说现在似乎比较新，文库版还在出，找了半天勉强找到一二卷的台版，后面都没出版，肯定是没希望了，只好跑去猪先生给的百合会帖子下看\u003c/p\u003e","title":"ajax网站资源爬取","type":"posts"},{"content":"","date":"24 April 2024","externalUrl":null,"permalink":"/tags/%E7%88%AC%E8%99%AB/","section":"Tags","summary":"","title":"爬虫","type":"tags"},{"content":"","date":"7 April 2024","externalUrl":null,"permalink":"/tags/timestamp/","section":"Tags","summary":"","title":"Timestamp","type":"tags"},{"content":"输出时间戳是个好东西，但是非常多输入法都不提供自定义方法，如果提供多半就是十分阴间的大输入法\n于是就去研究了一下微软输入法输出时间的方法，然后发现几乎都是无效的\n特性上微软输入法确实会对%yyyy%这种宏进行处理，但是阴间就阴间在win11以后，这种宏直接就提前转换了\n网上大部分教程都是直接设置自定义短语，然后使用 %yyyy%-%MM%-%dd% %HH%:%mm%:%ss% 然而实际上这样的短语定义根本就不是动态的，在输入这个短语后再次查看，就会发现短语已经被转译了 也就是说之后每次输出都是固定的时间\n这时候聪明人就会想了，那既然输入的时候会转译一次，那我再套一层不就行了 于是输入自定义短语 %%yyyy%%-%%MM%%-%%dd%% %%HH%%:%%mm%%:%%ss%% 打开一看，果然被消掉了一层，现在框里显示的是 %yyyy%-%MM%-%dd% %HH%:%mm%:%ss% 这下总没有问题了吧\n然后去输入，发现阴间输入法又不转译了，直接输出了 %yyyy%-%MM%-%dd% %HH%:%mm%:%ss% 真是服了\n之后去研究了一下微软输入法的特性，发现每次保存任意短语都会导致整个表被刷新转译一次 也就是说每次保存像%yyyy%这样的宏都会少一层\n最后的解决方案竟然是 先输入%%yyyy%%-%%MM%%-%%dd%% %%HH%%:%%mm%%:%%ss%%但是选择2号（或者其他位置） 然后再打开，修改成一号位置，保存 然后就能正常使用了，虽然这时候时间定格在了保存的时间，但实际上输出的时间却应用了宏\n简直是？？？ 并且每次修改自定义表的任何东西都要重设一次，简直蛋疼\n不说了，直接安装quicker\n","date":"7 April 2024","externalUrl":null,"permalink":"/posts/tech/%E5%A6%82%E4%BD%95%E8%AE%A9%E5%BE%AE%E8%BD%AF%E8%BE%93%E5%85%A5%E6%B3%95%E8%BE%93%E5%87%BA%E6%97%B6%E9%97%B4%E6%88%B3/","section":"Posts","summary":"\u003cp\u003e输出时间戳是个好东西，但是非常多输入法都不提供自定义方法，如果提供多半就是十分阴间的大输入法\u003c/p\u003e","title":"如何让微软输入法输出时间戳","type":"posts"},{"content":"","date":"4 April 2024","externalUrl":null,"permalink":"/tags/copilot/","section":"Tags","summary":"","title":"Copilot","type":"tags"},{"content":"开学季似乎有大量学生在申请Github学生包，而GitHub对这些申请又要人工审核，直接给我的申请拉满了时长，整整等了3天，不过总算还是通过了（写的等待时间是24-72小时） 从3月31日提交申请算起，只算工作日，属于是用满了72小时 目前来说网上还是有挺多申请教程的，但是似乎都有些outdated，尤其是很多申请居然还需要填写各种东西\n使用教育邮箱 # 目前的经验是，最好有一个教育邮箱绑定到自己的GitHub账号上，这样申请时选择教育邮箱再接个验证码认证一下，就可以直接进入提交材料的环节了\n使用dns加速 # 有很多教程都说不能开加速器，因为会要求共享地理位置，但实际上加速也有很多类型 这里推荐watt toolkit（原steam++）的host模式加速 原理就是中国的墙实际上是对steam进行dns污染，如果你使用中国的dns服务，那多半会被拒绝访问 但是也有很多dns服务是不墙steam的，比如cloudflare的，watt toolkit就支持让你直接使用指定的dns 这样你的ip地址和其他信息并没有变，只是为你提供域名解析服务的服务商变了，是可以通过地理认证的\n不过我直接用校园网访问，似乎没有问题\n提交材料 # 提交材料的初审是AI进行了，似乎只是检测一下有没有关键信息和材料的形式\n目前的建议是\n填写好GitHub账号的各种信息，最好和你准备提交的材料强相关 填写好付款信息 这里注意一下最好不要填中国的地址，因为中国地址会禁止付款（中国政府规定的） 反正我的已经禁止付款了，而且修改不了，如果是外国地址后续还可以修改 不过不影响申请，还是能白嫖 设置好2FA，现在已经是强制要求了，可以用edge的插件，个人建议还是伪装成美国人，如果用edge插件一定要到插件设置页面做一个备份，2FA的恢复码也保存一下，不然你就会体验手机丢了要登录电脑微信的感觉 给你的某个设备（不能是华为）刷一个国际版安卓 安装代理和GMS 创建一个gmail 愉快地使用Google play 使用任意2FA软件，同步到云 材料使用翻译过的学信网认证材料 学信网下载学籍验证报告 学信档案 (chsi.com.cn) 使用GitHub开源项目翻译报告 Nagi-ovo/CHSI-Converter: 在线一键转化英文版学信档案 (github.com) 自己用word稍微调整一下格式然后做成pdf 一定要直接用手机拍，如果有条件可以把学生证和一卡通也拍进去，反正AI会检测各种信息 反正我是直接拍了报告就通过了 通过以后就是漫长的等待，似乎也不用自己主动领取，到账了直接上GitHub就能看到自己已经是GitHub Pro了\n使用GitHub Copilot # 申请通过后去profile点your copilot，就能看到白嫖成功 选择一下就好了 目前有两个选项\n如果你打开使用网上的代码进行生成，有可能会给你生成有版权问题的代码（问题不大），可以更聪明 如果你选择让copilot更好，copilot会把你写的代码上传进行学习 其实无伤大雅，都是玩开源的，要闭源就直接开private了\n使用前人的智慧 Github Copilot 全方位上手通关指南 - 知乎 (zhihu.com) 其实还是要自己习惯和熟悉它的操作，我现在用的还比较少，后续有什么折腾的再更新\n","date":"4 April 2024","externalUrl":null,"permalink":"/posts/tech/%E5%A6%82%E4%BD%95%E7%99%BD%E5%AB%96github-copilot%E5%B9%B6%E4%BD%BF%E7%94%A8/","section":"Posts","summary":"\u003cp\u003e开学季似乎有大量学生在申请Github学生包，而GitHub对这些申请又要人工审核，直接给我的申请拉满了时长，整整等了3天，不过总算还是通过了（写的等待时间是24-72小时）\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"image.png\" src=\"/imgs/20240404222526.jpg\" /\u003e\n\n  \n\u003c/figure\u003e\n\n从3月31日提交申请算起，只算工作日，属于是用满了72小时\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"/imgs/20240404221302.jpg\" /\u003e\n\n  \n\u003c/figure\u003e\n\u003c/p\u003e","title":"如何白嫖Github Copilot并使用","type":"posts"},{"content":"","date":"2 April 2024","externalUrl":null,"permalink":"/tags/kali/","section":"Tags","summary":"","title":"Kali","type":"tags"},{"content":"","date":"2 April 2024","externalUrl":null,"permalink":"/series/wsl/","section":"Series","summary":"","title":"WSL","type":"series"},{"content":"","date":"2 April 2024","externalUrl":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"WSL","type":"tags"},{"content":" 安装kali-linux # 直接在WSL2上选择kali-linux安装即可\n安装图形界面 # 不得不说kali因为图形界面的必要性比较大（渗透测试很多软件都是有图形界面的） 使得kali的图形化技术非常成熟\n直接一键安装Win-KeX\nsudo apt update \u0026amp;\u0026amp; sudo apt install kali-win-kex 然后就能启动使用了\n因为kali的技术栈就是内置了一共vnc，所以还要给vnc设置个密码，随便设就行 使用直接看官方docs Win-KeX | Kali Linux Documentation 一共三个模式\nwindow模式，就是相当于占满屏幕，对多屏幕友好，我就直接用这个，放在副屏上 使用命令kex --win -s 增强模式，与Hyper-V类似，使用RDP获得功能更丰富的体验 使用命令kex --esm --ip -s 无缝模式，类似于WSLg，将部分图形镶嵌到windows里，软件也可以直接在windows里打开，还是很推荐的，这样就不用再到windows上安装一次工具了 使用命令kex --sl -s 安装工具包 # WSL提供的kali是最小版本，很多工具都是没有安装的，可以选择安装一种\n安装标准工具包 sudo apt install kali-linux-default 安装完整工具包（非常大，建议先迁移） sudo apt install kali-linux-large 还有一个top10的工具包，太离谱就不用了，直接装标准就行，反正后续自己装\n配置声音 # kali自带播放器和声音相关包，只是初始可能不运行 目前的方案是\n（1）在终端执行命令：systemctl --user enable pulseaudio （似乎不运行也行，我的甚至没有systemctl） （2）在/etc/default/目录下，创建一个文件，命名为pulseaudio，并添加以下内容： PULSEAUDIO_SYSTEM_START=1 DISALLOW_MODULE_LOADING=0 重启系统，就有声音了\nPS: 这声音系统时好时坏，配置应该是没问题，时不时dbus启动不了，不知道为什么，重启又能解决\n配置输入法 # Kali Linux 安装配置中文输入法 Fcitx5_kali fcitx-CSDN博客 fcitx容易出bug，还是用fcitx5吧\n","date":"2 April 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-06-kali-linux%E7%9B%B8%E5%85%B3/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e安装kali-linux \n    \u003cdiv id=\"安装kali-linux\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%ae%89%e8%a3%85kali-linux\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e直接在WSL2上选择kali-linux安装即可\u003c/p\u003e","title":"WSL-06 kali-linux相关","type":"posts"},{"content":"","date":"1 April 2024","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"WSL迁移不止是为了给C盘腾空间，也是为了方便进行备份\n查看WSL状态 # WSL -l -v 如果Running运行状态，关掉它 WSL --shutdown 导出系统镜像 # WSL --export Ubuntu E:\\Ubuntu\\ubuntu.tar 在路径下有了Ubuntu的压缩包，可以把这个压缩包备份，也可以直接导出到备份盘里，主文件并不受影响\n注销原有的linux系统 # WSL --unregister Ubuntu 可以再查看是否注销： WSL -l -v 导入系统 # WSL \u0026ndash;import \u0026lt;导入的Linux名称\u0026gt; \u0026lt;导入盘的路径\u0026gt; \u0026lt;ubuntu.tar的路径\u0026gt; \u0026ndash;version 2 (代表 WSL2)\nWSL --import Ubuntu E:\\Ubuntu\\ E:\\Ubuntu\\ubuntu.tar --version 2 对比前面，路径下多了一个 ext4 映像文件\n修改默认用户 # 打开WSL ubuntu之后，默认以root身份登录。\nubuntu.exe config --default-user \u0026lt;你的用户名\u0026gt; ubuntu.exe ：前面导入的时候没指定，所以这里用的默认ubuntu\n","date":"1 April 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-05-wsl%E8%BF%81%E7%A7%BB/","section":"Posts","summary":"\u003cp\u003e\u003cstrong\u003eWSL迁移不止是为了给C盘腾空间，也是为了方便进行备份\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e查看WSL状态 \n    \u003cdiv id=\"查看wsl状态\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e6%9f%a5%e7%9c%8bwsl%e7%8a%b6%e6%80%81\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWSL -l -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e如果Running运行状态，关掉它\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWSL --shutdown\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 class=\"relative group\"\u003e导出系统镜像 \n    \u003cdiv id=\"导出系统镜像\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%af%bc%e5%87%ba%e7%b3%bb%e7%bb%9f%e9%95%9c%e5%83%8f\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eWSL --export Ubuntu E:\u003cspan class=\"se\"\u003e\\U\u003c/span\u003ebuntu\u003cspan class=\"se\"\u003e\\u\u003c/span\u003ebuntu.tar\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在路径下有了Ubuntu的压缩包，可以把这个压缩包备份，也可以直接导出到备份盘里，主文件并不受影响\u003c/p\u003e","title":"WSL-05 WSL迁移","type":"posts"},{"content":"","date":"1 April 2024","externalUrl":null,"permalink":"/tags/pwndbg/","section":"Tags","summary":"","title":"Pwndbg","type":"tags"},{"content":"","date":"1 April 2024","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":" 编译环境 # 实际上没有什么好配置的，Ubuntu天生就是拿来搞开发的\n直接安装GNU工具链\nsudo apt install binutils diffutils gcc gdb grep g++ make tar\n其实就已经差不多了，只是要依赖自己在终端编译运行，习惯就好\npython3现在ubuntu自带的都是3.10.12版本，而且是系统必备库\n偶尔可能出现一些找不到程序的情况，大部分时候谷歌一下再做个软链接就行\n然后就是配置一下VScode的插件，大部分都可以直接从windows迁移\nVScode一些配置文件最好也设置一下，方便自定义\nubuntu下vscode编写C++环境配置，包括launch.json、tasks.json和c_cpp_properties.json文件说明\n之后就可以在windows上进行快乐的远程开发了\npwndbg # 其实考虑了一下，发现这东西应该装在kali里,不过有一个还是挺好的\n一个显著的优点就是可以查看各种更细节的东西了，比如汇编代码，栈和寄存器的内容，且是支持VScode读取的\n未安装pwndbg的情况下，尝试打开寄存器选项会导致gdb直接崩溃\n只要直接clone下来安装就行\ngit clone https://github.com/pwndbg/pwndbg cd pwndbg ./setup.sh 因为pwndbg是python的库，作为gdb的插件，所以安装时会顺便安装python的各种环境，属于是一举两得\n配置好网络就是愉快的一键安装，防傻又好用\n坑 # 关于makefile的编写 关于Cmake的使用 控制台优化——tmux ","date":"1 April 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-04-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e编译环境 \n    \u003cdiv id=\"编译环境\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e7%bc%96%e8%af%91%e7%8e%af%e5%a2%83\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e实际上没有什么好配置的，Ubuntu天生就是拿来搞开发的\u003cbr\u003e\n直接安装GNU工具链\u003cbr\u003e\n\u003ccode\u003esudo apt install binutils diffutils gcc gdb grep g++ make tar\u003c/code\u003e\u003cbr\u003e\n其实就已经差不多了，只是要依赖自己在终端编译运行，习惯就好\u003cbr\u003e\npython3现在ubuntu自带的都是3.10.12版本，而且是系统必备库\u003c/p\u003e","title":"WSL-04 开发环境配置","type":"posts"},{"content":"","date":"29 March 2024","externalUrl":null,"permalink":"/tags/gnome/","section":"Tags","summary":"","title":"Gnome","type":"tags"},{"content":" 给WSL安装桌面 # 踩坑经历 # 网上还是有很多先辈尝试过的\ngnome桌面尝试 # X server 技术栈 # 目前来说最完整的是这篇文章 Windows中WSL2 配置运行GNOME桌面版 Ubuntu-CSDN博客 但是时隔几年，WSL2变了很多\n基本流程不变，apt-fast可以不安装 主要安装两个包ubuntu-desktop和gnome，gnome-session大概率是包含的 在安装包之前要进行一个操作，还有一些可能的问题要处理 见WSL2 Ubuntu22.04安装KDE桌面_setting up acpi-support (0.144) \u0026hellip; failed to retr-CSDN博客 VcXsrv照常配置 最主要的变化就是图像输出地址的变化 在目前的绝大部分博客中都是写的\n在.bashrc文件末尾写入： export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk \u0026lsquo;{print $2}\u0026rsquo;):0 export LIBGL_ALWAYS_INDIRECT=1\n这个DISPLAY的地址和配置代理的地址是一样的，后面的:0是控制几号屏幕和几号窗口的 其实最后面的东西根本没必要看别人说怎么配置，自己打开VcXsrv，就能看到标题里有 所以直接用-1（让软件自己选择），然后地址上配0.0就行\n而前面的ip地址有很多说法，包括\n上面的说法，即Ubuntu的namesever地址 本机（windows）的ipv4地址 Ubuntu的ipv4虚拟地址 然而实际上这些地址都有问题，在新的Ubuntu里因为WSLg的存在，绝大部分情况下输出图像都被WSLg承接了 可以使用测试程序xeyes,就会发现眼睛出现在独立窗口里，而不是VcXsrc里\n经过本人的多次尝试，事实上DISPLAY地址应该是localhost:0.0 在这样的情况下，只要这一行，便可以实现将图像输出到VcXsrc\n然后就是各种bug，最好的情况也就是能打开桌面然后动一动了，终端都是打不开的 这里踩了超多坑，虽然有记录但是已经没意义了，因为未来大概率不支持了 GNOME 正在采取措施逐步放弃 X11 - Linux迷 (linuxmi.com) 而这条技术栈完全依赖于X11，走不远就不走了\nvnc 技术栈 # 大差不差，用xrdp来实现远程控制 Windows10 WSL2 安装Ubuntu并使用图形化界面_WSL2 ubuntu图形界面-CSDN博客 问题和X server技术栈如出一辙\n要么没图像，要么直接报错 性能还不好 KDE尝试 # 很少有人玩这个，我只是尝试了一下，问题一堆，还是快跑吧 WSL2 Ubuntu22.04安装KDE桌面_setting up acpi-support (0.144) \u0026hellip; failed to retr-CSDN博客\nxfce4尝试 # 问题不多，效果拉跨，不如没有 目前网上大部分人都是跑的xfce4，因为简单防傻，没多大作用 win11系统通过WSL/WSL2安装ubuntu，开启图形桌面 - 知乎 (zhihu.com) VcXsrc和xrdp的技术栈目前来说都还行，但是太丑了\n最终方案 # 装个锤锤gui，就一开发环境，还是远程开发，又不是kali，为什么需要桌面\n直接使用微软的WSLg方案 使用 WSL 运行 Linux GUI 应用 | Microsoft Learn\n大部分都装上最好，没有GIMP倒是问题不大，只是编辑不了图片 VLC必装，不然没有媒体播放器，声音支持似乎也靠它 Nautilus就是文件管理器，可以直接通过WSLg打开，非常方便 就是会产生一些莫名的报错，目前不是很影响使用，其实直接用vscode进行文件管理最好，只是有权限问题，不过大部分系统文件最好还是到终端用nano改 另外可以安装包管理器 在 Ubuntu 中使用轻量的 Apt 软件包管理器 Synaptic | Linux 中国 - 知乎 (zhihu.com)\n目前来说Ubuntu不是很适合搞GUI界面，要GUI还是看后面的kali-linux吧\n","date":"29 March 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-03-gui%E7%95%8C%E9%9D%A2/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e给WSL安装桌面 \n    \u003cdiv id=\"给wsl安装桌面\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e7%bb%99wsl%e5%ae%89%e8%a3%85%e6%a1%8c%e9%9d%a2\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003e踩坑经历 \n    \u003cdiv id=\"踩坑经历\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e8%b8%a9%e5%9d%91%e7%bb%8f%e5%8e%86\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e网上还是有很多先辈尝试过的\u003c/p\u003e","title":"WSL-03 GUI界面","type":"posts"},{"content":"","date":"28 March 2024","externalUrl":null,"permalink":"/tags/clash/","section":"Tags","summary":"","title":"Clash","type":"tags"},{"content":"","date":"28 March 2024","externalUrl":null,"permalink":"/tags/ssh/","section":"Tags","summary":"","title":"Ssh","type":"tags"},{"content":" 配置VScode进行远程开发 # 现在的Ubuntu就是一个精简的系统，里面几乎什么都没有，也没有GUI，用控制台进行后续操作十分麻烦，所以应该趁早用上VScode的远程开发 微软的官方教程非常详细开始通过 WSL 使用 VS Code | Microsoft Learn\n直接打开VScode，搜索插件Remote Development 这个插件包包含4个插件，即装即用，十分方便 这时有两种启动服务的方法 一种是在Ubuntu控制台使用命令code .，这将会以当前目录为根目录打开一个VScode工作区 但是这有一个很大的问题就是跨平台网络代理还没实现，大概率卡住且毫无办法 另一种是在VScode的侧边栏或下面找到连接到远程的选项 点击WSL对象，应该就能看到自己安装的Ubuntu，点击连接即可 VScode会把sever文件写入Ubuntu中，所以使用的是主机的网络，不会卡 现在就可以使用VScode管理和编写文件了，当然现在还会有诸多权限问题 处理网络问题 # Ubuntu的软件包自然都是在国外的，国内只有镜像而已\n你可以选择简单地将下载源切换成镜像来完成基本的apt包下载（但也不保证一定不出错） 只需要依次输入命令 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak # 给旧源做一个备份 # 通过字符替换切换成中科大的镜像源，也可以去找别的源 sudo sed -i \u0026#39;s@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g\u0026#39; /etc/apt/sources.list sudo apt update # 更新状态，让源生效 这样做可以实现大部分apt包的正常下载 但是如果要使用git，浏览器访问外网之类的就毫无办法了 在ICS课程里我就是只换了源，但显然这不是长久之计，所以这次得把网络代理处理好\nWSL1 和 WSL2 网络的区别 # 在 WSL1 时代，由于 Linux 子系统和 Windows 共享了网络端口，所以访问 Windows 的代理非常简单。例如 Windows 的代理客户端监听了 8000 端口，那么只需要在 Linux 子系统中执行如下命令，就可以让当前 session 中的请求通过代理访问互联网。\nexport ALL_PROXY=\u0026#34;http://127.0.0.1:8000\u0026#34; 但是 WSL2 基于 Hyper-V 运行，导致 Linux 子系统和 Windows 在网络上是两台各自独立的机器，从 Linux 子系统访问 Windows 首先需要找到 Windows 的 IP。\n配置 WSL2 访问 Windows 上的代理 # 有两个关键步骤：\nWSL2 中配置的代理要指向 Windows 的 IP； Windows 上的代理客户端需要允许来自本地局域网的请求； 由于 Linux 子系统也是通过 Windows 访问网络，所以 Linux 子系统中的网关指向的是 Windows，DNS 服务器指向的也是 Windows，基于这两个特性，我们可以将 Windows 的 IP 读取出来。 例如，在 Ubuntu 子系统中，通过 cat /etc/resolv.conf 查看 DNS 服务器 IP。 # This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/WSL.conf: # [network] # generateResolvConf = false nameserver 172.25.144.1 可以看到 DNS 服务器是 172.19.80.1，通过环境变量 ALL_PROXY 配置代理：\nexport ALL_PROXY=\u0026#34;http://172.25.144.1:7890\u0026#34; 7890 是 Windows 上运行的代理客户端的端口，记得要在 Windows 代理客户端上配置允许本地局域网请求。\n一键配置 # 在最新版本的WSL和Ubuntu下系统会自动配置代理 将上面的过程写入用户文件夹下的.bashrc文件，就可以轻松的实现在启动bash时一键配置代理：\n# for clash hostip=$(cat /etc/resolv.conf |grep -oP \u0026#39;(?%3C=nameserver\\ ).*\u0026#39;) export https_proxy=\u0026#34;http://${hostip}:7890\u0026#34; export http_proxy=\u0026#34;http://${hostip}:7890\u0026#34; export all_proxy=\u0026#34;socks5://${hostip}:7890\u0026#34; 代码通过 cat /etc/resolv.conf 来获取 DNS 服务器，也就是 Windows 的 IP，再将其中的 IP 部分截取出来，加上代理客户端的端口（我的是 7890，可以根据自己实际情况修改），使用 export 写入环境变量中。\n每次启动WSL前都开启代理即可实现对WSL的全局代理（国内网络几乎没有价值） 可以看到使用官方源速率也非常可观 ","date":"28 March 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-02-%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e配置VScode进行远程开发 \n    \u003cdiv id=\"配置vscode进行远程开发\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e9%85%8d%e7%bd%aevscode%e8%bf%9b%e8%a1%8c%e8%bf%9c%e7%a8%8b%e5%bc%80%e5%8f%91\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e现在的Ubuntu就是一个精简的系统，里面几乎什么都没有，也没有GUI，用控制台进行后续操作十分麻烦，所以应该趁早用上VScode的远程开发\n微软的官方教程非常详细\u003ca href=\"https://learn.microsoft.com/zh-cn/windows/WSL/tutorials/WSL-vscode\" target=\"_blank\"\u003e开始通过 WSL 使用 VS Code | Microsoft Learn\u003c/a\u003e\u003c/p\u003e","title":"WSL-02 配置网络代理和远程访问","type":"posts"},{"content":"","date":"28 March 2024","externalUrl":null,"permalink":"/tags/path/","section":"Tags","summary":"","title":"PATH","type":"tags"},{"content":"重启解决99%的问题\n非常值得吐槽的是系统环境变量竟然就存储在一个文件里 在powershell里使用命令$env:Path即可查看文件内容 你甚至可以通过命令$env:Path += \u0026quot;;\u0026lt;路径\u0026gt;\u0026quot;来实现对path的增加(并不全局，见下文)\n既然是文件，就会有一个很蛋疼的地方 ——对单个软件（或者其他使用path的程序）来说不实时更新\n比如说你打开了一个软件，这个软件需要你把某个路径加入path，这样软件才能正确调用\n首先你运行软件，发现报错了，显示找不到可执行文件 然后你去搜了一下，发现是某个东西没加进path，软件检索不到 于是你更改了path，但是没有重启软件，再次运行，还是检索不到 这是因为软件启动时已经将path文件读入了，且不会故意再去读 所以重启软件就能解决 但是更为惊喜的是我遇到的情况\n众所周知一些软件是可以唤出powershell的，比如我用的github desktop 原本我认为powershell是单独的软件，启动时应该是自行初始化的 但事实是，如果你不重启github desktop,无论你重启多少次powershell，这个powershell就是不更新path，甚至你调用$env:Path方法读取到的内容也没有更新 也就是说，由软件唤起的powershell会继承软件的一部分数据，包括读取到的path 而$env:Path方法并不是读取全局的path 经过一些调查可以发现 在 Windows 上，环境变量可以在三个作用域内定义：\n计算机（或系统）作用域 用户范围 流程范围 Process 作用域包含当前进程或 PowerShell 会话中可用的环境变量。 该变量列表继承自父进程，并由 Machine 和 User 作用域中的变量构造而成。\n在 PowerShell 中更改环境变量时，更改仅影响当前会话。 此行为类似于 Windows 命令外壳中的 set 命令和基于 UNIX 的环境中的 setenv 命令的行为。 要更改 Machine 或 User 作用域中的值，必须使用 System.Environment 类的方法。\n要更改计算机作用域的变量，还必须拥有相应权限。 如果你尝试在没有足够权限的情况下更改值，该命令将失败并且 PowerShell 将显示错误。\n","date":"28 March 2024","externalUrl":null,"permalink":"/posts/tech/%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E7%94%9F%E6%95%88/","section":"Posts","summary":"\u003cp\u003e\u003cstrong\u003e重启解决99%的问题\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e非常值得吐槽的是系统环境变量竟然就存储在一个文件里\n在powershell里使用命令\u003ccode\u003e$env:Path\u003c/code\u003e即可查看文件内容\n你甚至可以通过命令\u003ccode\u003e$env:Path += \u0026quot;;\u0026lt;路径\u0026gt;\u0026quot;\u003c/code\u003e来实现对path的增加(\u003cstrong\u003e并不全局，见下文\u003c/strong\u003e)\u003c/p\u003e","title":"系统环境变量配置不生效","type":"posts"},{"content":" 写在前面 # 由于WSL2使用hyper-v的问题目前还没有解决，所以本人使用了一条新的道路\n# 管理员模式下输入 Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux # 切换WSL版本到1 WSL --set-default-version 1 # 后续治好了WSL2就可以再次转换到WSL2 WSL --set-version \u0026lt;发行版名称\u0026gt; 2 WSL堂堂复活 # 这次直接使用狠活，把网络的所有设置重置了，将VMware的毒完全刮尽 这时候想要去重新开启hyper-v，却发现在windows功能里没有hyper-v选项 看了看似乎是专业版才有，家庭版不让设置\n使用脚本强制安装hyper-v功能 在文本中写入以下代码，再将扩展名改成cmd或bat运行\npushd \u0026#34;%~dp0\u0026#34; dir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum \u0026gt;hyper-v.txt for /f %%i in (\u0026#39;findstr /i . hyper-v.txt 2^\u0026gt;nul\u0026#39;) do dism /online /norestart /add-package:\u0026#34;%SystemRoot%\\servicing\\Packages\\%%i\u0026#34; del hyper-v.txt Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 需要安装一段时间，安装完成后就能发现windows服务里有hyper-v和WSL了 先把两个功能都关闭，重启，把所有设置重置\n再打开两个功能，重启，现在电脑就像没碰过VMware一样 又可以愉快地安装WSL2了\nPS: 一劳永逸，直接重装，痛失GitHub 2FA认证码\n关于WSL # 适用于 Linux 的 Windows 子系统文档 | Microsoft Learn 作为微软的产品，当然是直接去看文档啦\n安装WSL和Ubuntu # 如果你的windows系统“紧跟潮流”的话，就可以舒服地享受一键安装的快乐，只需要在powershell使用命令WSL --install即可\n如果发现命令无效，那就只能玩硬核的了 旧版 WSL 的手动安装步骤 | Microsoft Learn\n当然也不可能完全一帆风顺，你大天朝的网络总是“值得信赖”的 我故意没开代理，果然卡了，所以记得保持代理开着\n安装完成后会让你对Ubuntu进行初始化设置\n首先输入用户名，和windows性质一样，但是一定要用小写字母和数字，且最好字母开头 其他的形式可能造成未知bug 然后输入密码，这是你以后sudo要用的， 最好重复输入密码，初始化完成 现在已经成功进入到Ubuntu了，也可以在终端为Ubuntu单开一个专属于Ubuntu的控制台 ","date":"27 March 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-01-%E5%AE%89%E8%A3%85wsl%E5%92%8Cubuntu/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e写在前面 \n    \u003cdiv id=\"写在前面\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%86%99%e5%9c%a8%e5%89%8d%e9%9d%a2\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e由于WSL2使用hyper-v的问题目前还没有解决，所以本人使用了一条新的道路\u003c/p\u003e","title":"WSL-01 安装WSL和Ubuntu","type":"posts"},{"content":"《把自己作为方法——与项飙谈话》 一本挺非主流的对话体书籍，读着玩，感觉更像是文艺青年发表感想 很多东西经不起推敲，只能给个不同的视角，摘抄一点放着看看\n摘录 # 政治意识 # 八十年代不管哪个群体都有很强的政治意识。 谈话也都是跟政治有关，对时局怎么评价，对政治人物怎么评价。 后来我发现，普通人这么关心政治，关心社会变化，这在世界范围内其实很少。 叙述生活 # 你要在农村调查的话就会发现，在任何一个村都有人能把这个村子的事情说得很清楚。 我们现在跟年轻人谈话，让他坐下来讲一下他们班、他们学校的事情，讲清楚这个体系是怎么运转的，基本的权力结构是什么，主导意识是什么，每个人的动机是什么，能够分成几类，大部分人都讲不出来。 大家一定要对自己生活的小世界发生兴趣，有意识地用自己的语言把自己的生活讲出来，做一个独立的叙述——也不用分析，就是叙述。 “图景” # “图景”这个概念很重要，“理论”在拉丁文里就是“图景”的意思，给出一个理论，就是给出一个世界的图景。 理论其实不是给出判断，而是给世界一个精确的图景，同时在背后透出未来可能的图景。 “图景”有两层意思，一是现在的概括，再一个是未来可能的走向。 “文革” # （在受文革影响的舅舅眼中）“文革”是一个典型的悲剧。 所谓悲剧，如果回到古希腊的意思，就是一个潜在崇高的东西，不但崩溃了，还形成了巨大的破坏力。 其实它背后延伸出来的是一种内在矛盾——社会主义革命确实要不断发动群众，防止官僚化，不能让人民的代表老坐小车、肚子越来越大，但用什么方法来阻止？这个问题还没有找到解决方法。 乡绅 # 乡绅首先不喜欢知识分子。 乡绅很重要的一点就是要把自己那个村的情况摸得很熟，能够形成一个叙述。而且这个叙述是很内在的。就是他能把多数人活在这个系统里面的味道讲出来，他能够说清楚这个系统是怎么靠里面的人和事叠加出来，而不是靠外在的逻辑推演，所有他用的语言也基本上是在地的语言，是行动者他们自己描述生活的语言。 乡绅其次与调查员不同。 乡绅对细节的观察是要构造出一个图景，塑造出一个叙述，这个叙述要反映事实，而且要说给内部的人听，所以一方面可以说是很细致、很实证；另一方面又很注意总体的结构，这是很多现代调查员特别是统计方面的调查员不会注意的。 乡绅会做伦理判断，在观察社会的时候要判断某个现象是好还是不好。调查员不搞这个，调查员要搞价值中立，只看事实，而事实对社会的意义不是他考虑的重点。 乡绅最后与道德家不同。 乡绅的伦理判断不能完全按照书上写的标准来，他的伦理判断需要和老百姓的实践理性对得上。 告老不还乡与现代化 # 有人说，中国开始现代化的象征之一，就是官僚退休不回家乡了。 城市与农村之间的循环性的关系被打断了。 告老不还乡，点出了中国的中心和边缘的关系、城市与农村的关系、知识分子和普通群众（主要是农民）的关系，在现代发生了什么变化。 调子太高就很容易极端化 # 为什么90年代新自由主义改革能够那么顺利的进行？ 因为80年代没有给我们留下可以反思的资源。 ——汪晖《当代中国的思想状况和现代性问题》\n等级制度 # 所谓的理性和功利其实都跟等级很有关系。 等级制度打破了比较天然的自我认知。 资源 # 资源是在私有化市场经济之后，原来我们生存所需要的物质，现在转化成了潜在的资源，是可以升值的。你一定要占据，一定要有明确的产权。 新道德 # 道德不应该像帽子一样戴在我们头上，罩在我们的生活中，今天的道德必须把帽子从头上摘下来，放在我们手上，我们要去观察它。如果一顶帽子戴着头上，我们是看不到它的，我们可以意识到它的存在，但不知道帽子是什么形状什么颜色，不知道道德从哪里来，糊里糊涂跟着它走，是盲目的跟从。\n道德应该是一种有选择的道德，要以个体的自由为基础。 没有选择的道德是不道德的，强加的道德最不道德，因为我把道德强加于你，意味着我要对你的人性做一个潜在的彻底否定，你要不接受我的道德，在我眼里你就不是人了。 理论 # 理论不在于新不新、深不深、更不在于正确不正确，而是能不能形成沟通性。 可沟通性非常重要，哪怕是一个浅显的理论，但它能一下子调动起对方的思想，把对方转变成一个主体，那这个理论就是革命性的。 FUN与丧 # FUN的意思就是能够对事情本身发生很大的兴趣和热情，不需要外在的回报来刺激热情。 丧则是现在的条件变好了，自由度变高了，也有自己的爱好，开始有自己的FUN了，结果却陷入了一种普遍的沮丧，好像一切都没有意义，也看不到生活的变化。 边缘与中心 # 关键是怎样形成一种意识，在自己的历史局限和现在的行动计划之间平衡好，这是真正的英雄。真正的英雄不是改变世界，而是改变自己生活的每一天。\n在现代性之下，“边缘”与“中心”变成一组对立关系，中国人又有那么强的中心情结，觉得边缘的生活不值得过，造成极大的焦虑。权力和资源过度集中。\n边缘的人要进入中心的欲望非常强，这当然会让人发挥很大的能动性，但也造成各种扭曲。\n一旦进入中心以后，很多人开始变得腐败，变得没有原则 跟周边的人、生活的世界关系变得不清楚，变成机会主义者，将他人视为利用工具 如何把边缘的生活变得有趣，这很大程度上是文化建设和意识形态的问题。\n要让边缘地区的老百姓觉得他们每天干的事情其实很有意思，而不是老觉得自己的孩子不能再干这个，一定要到北京去。\n身份认同 # 大家现在说的身份认同有另外一层意思，好像认同了一个东西，就一定要捍卫一套价值，要遵循一定的行为规则，继承一定的文化气质，这个因果关系对我来说不存在。\n放弃了原来那种小乡绅的风格，想去追求认可。为什么会去追求那种（西方专业化的学术产业的标准）认可？就是因为没有小世界。如果我有自己真实的小世界，哪怕边缘，但比较强大，可以互相讨论，不用去找这样的认可。\n研究计划的风格 # 牛津给了我焦虑的条件，也是因为我经历了一些“文化震撼”。我刚到牛津的时候，要写一个研究计划，第一稿把我的导师吓坏了，他说这根本是不可行的计划，问我怎么会这样写。我回去看别人写的研究计划，也吓一跳，非常直白朴素，就像是跟父母讨论一样。这类研究计划的打分远高于雄心壮志、很正式的那种。\n我们在国内写报告，好像就是要高于生活，要写得很拽很正式，脱离生活，如果把吃喝拉撒睡都写进去，好像很不正常。 不要怕边缘，或知识不够，把自己的不够、天天真真地体现出来，就会很可爱，不要装腔作势。 中西对人性的强调 # 西方强调人性，政治家也是一样，大家都想知道这个人的生活习惯，早餐吃什么，喜欢喝什么酒，只有知道了你的真实性之后，才可以信任你。 当然东方文化在政治上是相反的，这些东西都要被隐蔽，领导人不是个人，他是权力的化身，这就是不太一样的理解。 反全球化 # 它是讲反全球化，但它又是一个全球现象，各个地方都在讲这样的话语，这是不是也是一种全球化？\n“历史的终结” # 所谓“历史的终结”——历史不再靠矛盾对立的辩证运动推动，而是大家都认同一个理念，平滑前进。——弗朗西斯·福山《历史的终结与最后的人》\n中国叙述 # 所以中国叙述在我看来是一种比较狭隘的思路，它要靠一种制度框架来界定自我。你是中国人，出生在中国，成长在中国，这是事实，但是你看问题的时候，可以是一个母亲，是一个女儿，是一个六十岁退休的老师，这些都是看问题的视角。 一定要有中国叙述，其实可能是对自己生活的不自信，需要一个很大的帽子来戴，这样才会觉得安全。\n“姿态性” # 中国知识分子总体上的姿态性很强。我觉得他这个描述是很精确的，我们确实很多人老是在摆姿态，讲不清楚事情，就给你一个论断。\n批判 # 我们成型的认识必然是主流的认识，所以批判理论需要包括很强的自我批判。\n理解 # 理解是人的本性的一部分，作为心理机制，一点都不难，如果说理解有难度，其实是一个位置问题，看你愿不愿意把自己摆在对方的位置上。很多情况下人们拒绝这么做，因为有利益在里面。\n理解就是主体间性 理解需要建立在了解的基础上，了解就是实证调查。 言与行 # 在今天的情况下，言行不一致不是一个要突破的问题，而是一个“要拥抱的事实” 社会就是靠很多言行不一致构成的。 不能够认为他的“言“就完全是假话，他的”行“也不一定都是事先预谋，要把他的言和行都看作是他的行动。 官方的用语仅仅只是幌子吗？\n”理解“和”存在即合理“ # 你看到一个人很狭隘，很凶残，甚至犯罪杀人，一种回应是说这是个坏人，是个恶魔，生来如此，本质如此；另一种回应是想：他为什么会变成这样？是和小时候的什么经历、现在的什么生活遭遇可能有关系？这样我们也就必然要想到社会的大环境，要去想他的内心活动，他怎么想怎么感觉的。\n通过理解，我们才知道我们应该怎么面对这些社会病态：不能把人一棍子打死，要考虑如何沟通，否则对罪犯就只有放纵和消灭两种态度了，没有教育改造一说了。 通过理解，我们自然会在别人身上看到自己的影子：我们是不是也在变得很狭隘、变得不耐烦？ 深刻 # 深刻总是相对的，因为我们提出的见解不只是对这个问题的见解，真正的基准点（reference point)其实是另外的见解，关键是你这个见解和其他见解之间的关系。 “深刻”是精确地把握住现实，同时对别的见解形成批判性的再认识。这不是说把别人的理解简单推翻掉，别人也有别人的道理，尤其是很多见解存在了那么多年，大家都觉得说得不错，背后也有道理。 所以深刻是一种理解，不仅是对一个现象做出了很精确的把握，同时也理解了其他理解的不足，让你学会今后在理解类似的事情上，应该有什么样的方法。 “深刻”是多重的主体间性和调査对象之间，和其他人、和权力的关系，也是一个网状的生态，要把自己放在知识生产的体系里，才有这种深刻性。 深刻不能靠推演出来，它是生态性、多样性的，必须要靠浸透。 透彻、通透 # 说一个人说得“透彻”，或者活得通透，我觉得这些概念背后都有一种倾向，好像我看得足够多足够清楚了，于是我什么都不在乎，结果要么是尽情的放纵，要么是彻底的虚无。\n那种通透是不成立的，如果这样的话，世界就不改变了，历史就是静止的。事实上世界一直都在变，通透的人怎么去解释这个变？如果说一切都是随机的不可言说的，那是反历史的。\n深刻是从网状知识结构中来的，而那种犬儒式投降式地回到自己的小世界，买完菜、做完饭，其他什么都不管，只是消极地用最小耗能法去应对，生命也可以维持下去，但就停止思考了。那就把生命的活的网变成一个死的点。\n社会科学 # 社会科学要给普通人提供观察世界、为人处世的办法，不是通过简单的道德教化，而是通过分析，这是社会科学的一个重要功能。 它不像自然科学，发现自然规律，问题就解决了，顺着规律走就可以。它可能是倒过来，社会科学告诉你，其实没有什么很强的规律，都在于自己怎么样去理解这个世界，怎么样主动地采取行动。 可能会有大的图景，但没有所谓的规律，因为一旦发现规律，那么一切到此为止，就不需要再去做工作了。它是通过科学的态度去证伪，去搜集材料，把事情搞清楚，但最后是要武装你，进一步去创造新的现实，去改变现实。 年轻人要有这样的态度，不要把社会科学当作寻找答案和解决方案的一个路程，它确实给你工具，但这个工具怎么用、怎么用好，完全在于你。 整个社会科学就是学习培养主体性。主体性不是说“我很厉害”、“我很特殊”，完全不是这个意思；而是说我作为一个人在这个世界上，我和世界是什么关系，我看到了什么，哪怕我的看法不对，但是应该把自己怎么想的搞清楚。\n”象征化“和”符号化“ # 咱们讲到北大，那么热的天，西门外面那么嘈杂，大家都要在西门外面照相。你要把动物放在北大附近，它们肯定不会去西门外面，它们会跑到未名湖边的树林里，因为那里凉快。\n这个正是要反对象征化。不要去找象征性的领导。 人，特别是中国人，认为文明和象征联系在一起，认为那几个字很重要，一定要拍下来，要在那里站一下。这是反自然的。 象征就是牢笼，奔向象征是奔向了文明，同时也奔向了牢笼。背后是一种非常野蛮的关系。 你讲到领导权，包括中国在内，很多亚洲国家都有这个问题。作为召集、作为激发、作为鼓动、推着前进的领导，很快也会转化为象征，成为符号，就很容易被人所利用，符号就物化了，和金钱一样。\n所以一定要抵制物化，抵制符号化，要把自己的领导力作为一个过程、一种实践。 我们总体的社会环境，有很强的冲动要把人符号化、象征化，这个大学，那个名人，很多人都是抱着五颜六色的泡泡在漂。 年轻人要有勇气去问：这是在干什么，这个大学好在哪儿，跟我有什么关系，名人不名人的，先看看他在说什么，说的东西有没有趣，直截了当地去理解。\n符号是靠大家撑着的，如果不撑它，符号就没有了。 把符号化的东西消解掉，形成有机的小群体、横向的领导力，不要指望有父母亲式的人物给你保护。我们从小的教育符号化太重了，要摆脱那个，用比较自然的方式问问题，用有机的语言说话，这需要一段时间的培养。 如何看待”恢复高考“ # 70年代末，恢复高考，怎么理解这个事情？ 现在去看那些改革开放四十年的回顾，都认为恢复高考是很重要的机会，觉得这是天经地义的事，恢复高考就说明社会恢复了基本的理性，实现了基本的正常，但这是谁的正常？ 对农民来讲，恢复不恢复高考，对当时90%的农民来讲影响不大 但是恢复高考把此前的官僚和城市知识分子一下子拢进来，其实是一个政党和当时社会主义体制下的精英的重新联盟。 大学当然是搞精英主义，你看现在回忆恢复高考的人，很多都是干部子弟，从农村回到城市，不仅恢复了原来比较优越的地位，而且用这种途径在文化、道德上使自己的优越正当化、合法化。 这种体制下面的大学，代表着理性、正常、合理，在整体环境比较和平的情况下，大家都追求正常，不仅在中国，整个亚洲也是。 出国留学与”人“ # 再生产和学生的流动就很有关系，现在的英语教育、出国留学，不仅是简单的镀金，而是要改变人本身。家长们不仅仅是想让孩子读个洋学位好找工作，而是越来越觉得国内的教育不符合人性，把孩子的天性快乐搞没了，出国是为了保护“人”。这背后不是简单的理念问题。这么大的产业，最后是一个长期的社会问题。\n新民族主义 # 国家成为唯一一个集体性想象的单位，在国家之外，班级、大院都没了，只剩下个人和世界。\n突然出了一个事件，需要一个集体作为自我认同的依托时，就只能奔向国家。\n当然国家也提供很多话语，让你奔向它可以奔得很自然，这就是所谓新的民族主义。 这种民族主义不是基于对历史、传统、文明的浪漫主义怀念和想象，而是基于一种对世界权力格局的理解，它是地缘政治意义上的民族主义。 也就是说，强者这么做，我们也必须得这么做。一切都是权力和利益斗争，把世界化约为国家之间的权力场。 留学中介 # 留学中介在理论上没有存在的理由。国外大学当然很想招留学生，因为留学生给欧洲带来大量的收入，日本很多大学就是靠留学生生存的，迄今为止留学生都是美国主要的后备科研力量，是它保持超强大国的原因之一。大学把招生简章、申请程序写得非常明白，放在首页。申请人都受过教育，朋友、同学也都在国外留学，没有一个产业比这个更透明，在操作程序、能力的供求对接上，没有信息不对称的问题。\n那为什么需要那么多中介？\n首先有大学的原因，比如新加坡国立大学倾向于指定中介去招生，因为这些中介能够处理大量的申请，清楚中国或印度高考的基本程序和高中的情况，能够替你过滤，保证学校招到最好的学生。 从学生的角度，中介的作用其实是对未来就业情况特别是投资回报的可能性做一个分析— 我这样的情况去哪个学校学什么专业，投资回报会更高。 所以中介一方面促进了全世界的学生流动，另一方面也在塑造和维持等级关系——什么样的大学招什么样的学生，什么样的投资可能有什么样的回报。大学排名为什么变得这么重要，就是因为可以给这些投资人信息。 所以中介在这里不是处理信息不对称、要把供求双方对接、培养这个市场，而是要把这个市场给结构化和稳定化，什么样的学生去什么样的大学，什么样的大学招什么样的学生，它给分化好了。 留学与社会分化 # 留学是把社会分化跨国化了。 在一个国家内部的分化竞争到了尽头，必须要往外走。中国玩不转，就出国玩；父辈有钱，儿子就挣学历。 空间上从国内转到国外，资本类型上要从有形的金融资源转变为文化和象征资本。 文化象征资本对维持金融和经济资本的跨代增值非常重要。不平等的固化都是这样，从钱到名到身份，以及空间上的转移。 理论和群众路线的关系 # 理论作为中介就很像毛泽东讲的群众路线，从群众中来，回到群众中去。 在这样的过程当中，我们需要理论，因为只有通过理论，才能把分散的经验总结出来，总结出来的东西，必须要是有趣、有机、有用的，群众能够拿回去用。 更重要的是，当你回到群众中的时候，需要理论去解释为什么这个经验有用，应该怎么样用，用了之后可能会通向什么样的未来。理论是为了互动。 ","date":"27 March 2024","externalUrl":null,"permalink":"/posts/book/%E6%8A%8A%E8%87%AA%E5%B7%B1%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95/","section":"Posts","summary":"\u003cp\u003e\u003cstrong\u003e《把自己作为方法——与项飙谈话》\u003c/strong\u003e\n一本挺非主流的对话体书籍，读着玩，感觉更像是文艺青年发表感想\n很多东西经不起推敲，只能给个不同的视角，摘抄一点放着看看\u003c/p\u003e","title":"《把自己作为方法》","type":"posts"},{"content":"","date":"27 March 2024","externalUrl":null,"permalink":"/categories/book/","section":"Categories","summary":"","title":"Book","type":"categories"},{"content":"","date":"27 March 2024","externalUrl":null,"permalink":"/tags/book/","section":"Tags","summary":"","title":"Book","type":"tags"},{"content":"","date":"27 March 2024","externalUrl":null,"permalink":"/tags/extract/","section":"Tags","summary":"","title":"Extract","type":"tags"},{"content":"《工作、消费主义和新穷人》 挺有意思的一本书，当年高考结束后没事干就读了一次，那时候玩疯了，没读进去 之前莫名又得到了猪先生的推荐，才发现这本书还被带到学校来了 以我的能力实在是写不出什么有意义的东西，直接重读又显得很空洞，所以就想着做个笔记吧 其实说是笔记，基本上都是摘抄，又太久没有写字，就准备打字做 有一些结构性的组织，但基本还是照着原文来的，虽然都是抄，但也是自己一个字一个字打的 回过头来看确实有效果，至少脑子里印象深了很多\n导言 # Q: 穷人究竟如何而来？是什么导致了贫穷？社会大众（我们这些既不富裕也不贫穷的大多数）的生活方式在多大程度上制造出了贫穷？\nA: 贫穷的含义取决于与他们同在的我们。\n概况：\n第一章：工作伦理的起源 第二章：现代社会从“生产者社会”到“消费者社会”不可阻挡的过程以及产生的影响 第三章：福利国家的兴衰 第四、五章：以一种新的方式，穷人在社会上产生并在文化上被定义 第六章：穷人和贫困问题的未来 第一章 工作的意义：创造工作伦理 # 什么是工作伦理？ # 简单来说，工作伦理本质上是一条戒律，它有两个外显的前提和两个内隐的假设：\n前提 为了维持生活并获取快乐，每个人都必须做一些他人认同的有价值的事 即获取之前需要先给予 安于现状，不思进取是可耻的，工作本身就具有价值，是一种崇高且鼓舞人心的活动 戒律的内容 即使你看不到任何得获（你尚未拥有之物或你认为不需要之物），你也应该继续工作。工作即正义，不工作是一种罪恶 内隐假设 绝大多数人都有能力工作，可以通过出售工作能力获取相应收益，用以维持生活 只有公认的有价值的工作——那些可以要求薪水回报的，可以用于交易的——才会被工作伦理认同 工作伦理的产生 # 每当有人谈论伦理，你都应当意识到一定有某些人对另一些人的行为方式不满，并希望他们有所改进。\n时间 工业化早期 地区 欧洲地区 背景 当时的普遍恶习：大多数人都不愿被工厂雇佣，也拒绝服从由工头、时钟和机器设定的生活节奏 传统观念：人的需求是既定的，并不渴望追求更多。 一旦这些既定需求得到满足，“因循守旧”的工人就失去了工作的动力，无意赚取更多的金钱 世界上还有金钱买不到的有趣而体面的事情可以去做，但需要花费时间 工业化的新环境使过去的工作态度（工匠精神等等）失去了意义 事件 现代理性主义先驱发起了英勇战争（历史由胜利者书写） 被记录为工作伦理引入之战的道德改良运动 据记载，这场战争战胜了那些毫无理性、无知愚昧、不可原谅、拒绝进步的大众，使人们意识到应当向往更好的生活，向往更新更好的东西，并渴望自我完善 目的 在工厂内部，在工厂所有者掌控的纪律之下，重塑全心投入、具有奉献精神的工作态度以及艺术级的工作表现（然而这些追求是过去工匠在自己掌握工作时，自然而然地展现出来的） 结果 事实上，工厂体系的诞生彻底瓦解了工匠和他们的事业之间的亲密关系——这被工作伦理认为是理所当然的 过去的工匠很快变成了工人，只剩下计算成本效益的冷漠，前工业时代的工匠本能迅速地消亡 工作伦理的真实作用 # 工作伦理的幌子之下演化出的纪律伦理 # 不用在意尊严或者荣誉、感受或者目的——全力工作就好，日复一日、争分夺秒，即使你完全看不到努力的意义所在\n劳动的异化 # 在过去，人们通过自己设定目标、自己控制进程，获得工作的意义和动力。 现在，人们只能被动地完成由他人设置和控制的任务，工作对他们而言失去了意义\n人沦为了客体，沦为了被使用的劳动力\n问题与解决方案 # Q: 如何驱动工人运用自己的技能完成这些没有意义的任务？ A: 机械地训练工人，让他们习惯于不假思索的盲从，并且剥夺他们完善工作的自豪感。\n工作伦理本质上是对自由的摒弃，是为了对抗人身上那些无用的”部分“——兴趣与雄心\n工作伦理描绘了新的生活方式 # 工作伦理改革运动是一场关于控制和服从的战争。除名称外，这是一场彻头彻尾的权力斗争，以崇高道德为名，迫使劳动者接受既不高尚也不符合他们道德标准的生活。 ——工作即正义\n工作伦理将人们所做的事和他们认为值得做、有意义的事分离开，将工作本身和任何切合实际的、可理解的目的分离开 工作伦理也把生产活动和人的需要分离开。人们第一次优先考虑“能做什么”，而非“需要做什么”。它使得满足人的需要与生产活动的逻辑无关，更重要的是，与生产活动的限度无关。——这形成了一个时代悖论：为增长而增长。 工作伦理创建了新的道德准则 # 劳动者应当平和地、不假思索地服从冷酷无情的机械化工厂工作 # 上层阶级希望劳动者只具有奴隶的价值。工人应当是勤勉的、专注的，永远不要考虑自己，只对自己的主人忠诚，依附于主人，他们应当意识到自己在国家经济中最适当的地位就是过去种植园经济时代奴隶所处的地位。 我们平时赞赏的人类美德，到了奴隶身上就成为了罪恶\n高效即正义 # “自然应当被征服，并尽可能为人类的利益和便利服务，这远比弃之不顾好得多。\u0026quot;——弗朗西斯·培根\n卡尔·马克思将历史的进步定义为人类不可阻挡地主宰自然的步伐。\n一旦明确了最终目标，唯一要做的就是尽力缩短人们征服自然的进程，除此之外的任何准绳则遭受质疑，日渐式微：\n不应有怜悯、同情、关怀之心。对受害者的怜悯削弱了人们的决心，使仁慈的人放缓了改革的步伐。 工匠对于传统权利的捍卫，以及工业化前穷人表现出的对合理、高效的机械化工作体制的抵制是自然放置的障碍。 穷人的懒散也是拒绝进步的抵抗，强硬、严格、不留情面的工厂纪律在道德上非常有必要。 机械劳作也是一种正确 # 凝聚了人类智慧的辉煌世界领路人（那些机器的设计者和使用机器的先驱）坚定地认为，只有发明家的的创造性思维才能引理人类世界的进步，而为了发明家的思想发挥作用而付出体力劳动的人，可以被视为等同于纯粹的机械力量，他们的理性几乎没有用武之地\n工作伦理对工人的道德教育 # 让穷人与“不思进取”的人工作，不仅是一项经济任务，更是一项道德任务。\n劳动者只能成为当下如火如荼的理性变革的对象，而非主体。\n工作伦理同时提供了建设性的愿景和拆除旧有习惯的方案： 否定传统的生活习惯、喜好与欲望，描绘正确的行为模式 否定普通工人的传统主义——他们依据一种固化的物质需求想象做事，这导致他们趋向于懒散，放弃通过更多努力、更长时间的工作来增加收入。 **工作伦理表面上的对手是“无欲无求”，但真正的火力（最猛烈、最残酷的），对准的是那些工人的反抗心态。\n工作伦理时代下的穷人 # 逐渐形成共识的是，穷人是可以被牺牲的，无论他们是否应该对自己的处境负责\n方案一：济贫院 # 如果穷人生活得很痛苦，他们的数量就会大大减少。 穷人和老鼠一样，确实可以通过这种方法消灭，或者至少把他们赶出人们的视线。需要做的只是下决心把他们当作老鼠对待，并接受穷人和不幸的人是需要解决的麻烦。\n前提 工作伦理主张：无论生活多么悲惨，只要它是由劳动报酬支撑的，就具有道德优越性。 ——不工作 劣于 工作 推论 不工作的穷人 劣于 工作的穷人 结论 社会向无收入者提供的援助应当符合”最小化原则“ 依赖救济而非工资收入的人享有的生活质量必须低于最贫穷、最悲惨的劳动者。 导向 不工作的穷人越是生活堕落，越是深陷赤贫，那些有工作、出卖劳动力换取最微薄工资的穷人的生活就越诱人，至少不至于无法忍受 实践 《济贫法》规定：所有对贫困人口的援助都仅限于济贫院内。 济贫院的境遇需要足够骇人听闻，以把“真正的穷人”和那些为了逃避工作伪装的穷人区别开，让大众认同：进入济贫院一定是走投无路了。 废除济贫院外的其他援助，让穷人重新考虑机械劳作的价值。 将济贫院设计成监狱一般的设施，用巨大的、坚不可摧的委屈将那些“麻烦”围住，以防止他们“污染”有工作潜力的穷人。 控制济贫院内的真实情形宣传，形成一道无形的文化隔离墙——济贫院堡垒外的流言越是恐怖，工厂工人的奴役看起来就越像是自由，苦难就越像是福祉。 成果 取得了暂时性的胜利 问题 助长了工作伦理意图消灭的危害 救济院的恐怖生活成为评估工厂雇工生活质量的参照，帮助雇主更加肆无忌惮地加大对劳工的压迫 最终，那些接受工作伦理的人与那些拒绝接受的人，以及尝试接受但最终失败的人，几乎没什么差别 方案二：消除选择 # 不应抱有能把真正的穷人和伪装的穷人在理论上精确地划分到两个阵营的幻想，这也毫无现实意义。\n劳教所、救济院和工厂（以及监狱、精神病院、医院、学校等），无论这些机构表面上的目的是什么，他们都面对相同的问题，具有相同的关注：必须强制执行统一的、规范性的、可预测的行为模式，以约束五花八门、本质上不守规矩的囚犯。\n理论 直达工作伦理的核心：基于无条件服从的纪律规范，通过至上而下的有效监督，固化乏味的、规律有序的行为。 “囚徒”对工作无可救药的厌恶理所应当，无需讴歌工作的高尚道德意义。 实践 不给“囚犯”其他选择，直接通过逼迫让工作伦理“融入他们的良知” “仅供生存”——将薪水维持在一个足够低的水平，除了继续努力工作生存，别无选择 一些额外保险措施——对肉体的胁迫。 问题 反道德倾向 若希望工人道德完善，就必须扩大其自由的边界——这才是道德能够生长并最终开花结果的唯一土壤。 失去过程正义 间章 生产者社会及其转型 # 生产者社会 # 工作的复杂价值 # 在当时而言\n对个人而言，当自身体面性和品格受到质疑时，去工作是一个颇为得体的自证方法。 给与所有人工作，让所有人去工作，通常被视为治愈因社会（暂时）的不完美、不成熟导致的一切弊病和麻烦的良方。 工业社会的最终形态是一个巨大的工厂，每个健全的男性都在其中被生产性雇佣。 马克思主义：反对资本主义的口号是“不劳动者，不得食”。 未来无产阶级社会的愿景也是完全基于工厂的模样构建的。 **工作同时是个人生活、社会秩序和社会生存能力（系统再生产）的枢纽 个人生活 工作是一个人身份认同的重要组成部分，除了那些由于世袭或者暴富的人，你是谁这个问题往往指向人们的职业身份。 工作类型是一种关键的，决定性的分类，是所有其他社会生活的锚点。 工作类型让人们找到自己的位置，尊重自己的上级，让下级服从自己。 工作类型定义了人们应该匹配的生活标准，定义了他应当与谁为伍，应当与谁划清界限。 后现代社会是一个根据选择的能力和承担的责任来评估、奖励其成员的社会。 社会秩序 工作场所承载了最重要的社交融合，人们在这里接受训练，培养服从规范、遵守纪律的行为习惯，形成自己的社会性格。 失业的人将变为无根浮萍，无人控制、无人监督，不受任何惩罚性规制约束。 父权制家庭成为大部分男性进入工厂工作以维持生产和社会秩序的必要补充。家庭的父权制将秩序生产与服务网络的规训压力传导到更多人群。 社会生存 现代工业社会的实质是借助自然的可用能源对（同样是自然的）资源进行再加工，最后产出财富的过程。这种再加工是由资本所有者/管理者组织通过雇佣关系实现的，因此其延续性取决于资本所有者能否让未参与生产的人口源源不断地加入生产过程。 现代社会结构 # 在现代安排（modern arrangement）的所有三个可分析层面（个人、社会和系统），工作都占据了重要的位置，也正是借由工作，这三个层面联系在一起，实现了彼此的沟通与协调。\n在现代化体系的实现过程中，工作伦理居功至伟，构成了“生产者社会”。\n生产者社会的转型 # 从“更好”到“更多”\n新的出路 # 工作伦理似乎主要是欧洲人的发明，而大多数美国社会历史学家都认为，推动美国工业前进的是企业精神和跻身上层阶级的愿望，而非工作伦理\n理论 工作是一种手段而非价值，是一种生活方式或一种使命 工作是为了获得更多财富，从而更加独立的手段，是摆脱令人厌恶的必须为他人工作这种境遇的手段，无需任何高贵品质的包装 工作不需要被热爱，也不需要被认为是道德的象征，人们可以公开反对工作，这不会招致纪律的崩坏，因为他们相信当下的忍耐是为了并不遥远的未来的自由的代价 手段 通过精心设计的经济激励机制鼓励人们积极工作 与其宣扬努力工作通向道德高尚生活，不如告诉大家这是赚钱的手段。 不要在意“更好”，“更多”才是最重要的。 结果 人们变得只会为了更多盈余而斗争。人们默默接受了现存的权力结构，对这种结构的修正被排除在议程之外。 **衡量人们声望和社会地位的是工资的差别，而非勤于工作的道德或堕于工作的罪恶 社会生存质量的权力斗争变成了获得更多金钱的斗争，经济收益成为自治自主的唯一体现 **将人的动机和对自由的渴望牢牢地、不可逆转地转向消费领域。 第二章 从工作伦理到消费美学 # 我们身处消费者社会 # 消费者社会意味着什么 # 消费者社会意味着什么 # 消费者是消费的人 消费意味着把东西耗尽：吃穿用度，或以其他方式满足欲望的桥梁 消费意味着付费购买事物，使其成为自己的专属财产，禁止其他人未经许可使用它们 消费意味着毁坏：在消费过程中被消费的东西将不复存在，它们或者在物理上被消灭，或者被剥夺了原本的吸引力，无法再唤起欲望 消费者社会是以消费者构成的社会 过去之所以被成为生产者社会，是因为那时人们主要以生产者的身份参与其中。社会塑造其成员的方式由社会分工的需要决定，社会希望其成员有能力和意愿参与分工 消费者社会主要要求人们以消费者的能力参与其中，首先依照消费者角色需要塑造其成员，并期望他们有消费的能力或意愿 消费者社会与生产者社会的异同 显然两种类型的社会都有一部分成员参与生产，所有成员参与消费 但社会的重心发生了转移，这造就了社会、文化、个人生活的各个方面的巨大差异 消费者社会的运行逻辑 # 人首先要成为消费者，然后才能成为其他身份 ——消费引导生产与工作\n前提 理想情况下，消费者不应该固守任何东西，没有永久的承诺，没有可以被完全满足的需求，也没有所谓的终极欲望 消费总是需要花费时间，这是消费者社会的桎梏 理想情况下，消费者立刻得到满足——消费应该立刻带来满足感，没有时延，不需要旷日持久的技能学习和准备工作；而这种消费行为一旦完成，这种满足感就应该尽快消失。如果欲望不用等待就能充分满足，那么消费者的消费能力就可能远远超越所i有先天、后天的需求的限制，或超越消费品耐久的限制，一直以来需求和满足需求的关系或许会翻转：对满足的期待会先于需求，并总是大于现存需求 结果 消费者在消费市场中不断接受新的诱惑，持续处于永不枯竭的兴奋当中，持续处于怀疑和不满当中，欲望使得他们不断工作以满足消费 消费者与消费市场 # 人们常说：消费市场诱惑了消费者 但实际上，为了做到这一点，成熟的、热衷于被诱惑的消费者也必不可少，在正常运转的消费者社会中，消费者会主动寻求被诱惑 也即是说，有了被诱惑的需求，才有了提供诱惑的市场 本来是市场选择了他们，并把他们培养成消费者，剥夺了他们不受诱惑的自由，但每次来到市场，消费者都觉得自己可以掌控一切。 ***他们可以评判、评论和选择，他们可以拒绝无限选择中的任何一个——除了“必须作出选择”之外。\n消费美学替代工作伦理 # 消费取代了工作，把个人动机、社会整合和系统再生产链接在一起。 [[03books/工作、消费主义和新穷人#生产者社会]]\n消费美学下的社会定位 # 背景 最初，工作是确定社会定位的首要工具。一旦选定身份，人们就终其一生去构建这个身份，终其一生于他们的工作、职业或事业。 但现在，只有极少数情况下，才能通过从事的工作来定义永久身份，更不用说确保这个身份。长期的、有保障的、确定性的工作已经很少见 目前的全球趋势是通过大幅减少产品和服务的寿命，以及提供不稳定的工作（临时的、灵活的、兼职的工作），将经济导向短周期和不确定的生产 现状 现在流行的口号是灵活 身份具有灵活性，但必须遵循“拥有尽可能多的选择，最好拥有所有选择”的原则 当前的身份最好都是暂时的，以拥抱下一个更新、更鲜艳或者未曾尝试的身份 随着社会地位越来越得到关注，人们越发恐惧于过于牢固的身份认同，害怕在必要时难以全身而退 身份如同消费品一般被占有、被“消费”、被抛弃 消费美学的评判 # 伦理学赋予履行责任以最高的价值，而美学则把崇高的体验放在首位 履行职责有内在的时间逻辑，所以它把时间结构化，指引一个方向，使逐步积累，延迟享受等概念具有意义。而追求体验没有任何延迟的理由，延迟或许只会导致浪费机会。\n重塑集体的价值 # 生产者社会 生产者只能集体完成使命，生产是一种集体性事业，需要分工、合作与协调。 每个人的工作只有在交流、沟通、融合中才有收获 消费者社会 消费彻头彻尾是一种个人的、独立的乃至孤独的活动，根本不存在什么“集体消费” 如果挑选商品时有其他消费者陪伴，或身处于充斥着消费信徒的熙熙攘攘殿堂，整个消费过程就更加愉悦 被共同欢庆的是选择与消费的个性，这种个性通过其他消费者的模仿得到重申和确认 重塑社会阶层 # 选择的自由设定了消费者社会的阶层，设定了消费者社会的成员绘制生活理想的框架，为他们定义了自我改善的方向以及美好生活的图景。 个人的选择自由度越大，自由行使的选择权越多，TA在社会阶层中的地位就越高 重塑工作价值 # 与生活中的其他活动一样，工作现在首先受到美学的审视。工作的价值取决于产生愉悦体验的能力，不能使人获得“内在满足”的工作没有价值。\n背景 不同的工作带给人的满足感差异很大。有些工作总是被追捧，被认为是富有满足感或者“成就感”，其他工作则被认为是苦差事。有些工作是“有意义的”，更容易被认为是一种“使命”，令人感到骄傲、自豪。 工作伦理认为： 严格地说任何工作都有价值，没有哪个低人一等，所有工作都能增加人的尊严，都同样服务于道德得体和精神救赎的事业。 所有工作本身而言都是“人性化的”，不管从事者得到的是什么直接乐趣或者没有乐趣，尽职尽责能带来最直接、最具决定性、最充分的满足感。 工作伦理淡化了工作间原本显著的差异，包括带来满足感的能力、带来地位和声望的能力，以及能够提供的物质利益。 现状 消费美学将某些职业提升到引入入胜的程度，赋予其精美的美学内涵、真正的艺术性体验；其他那些为了生计获取报酬的职业则根本没有任何价值。这些“高大上”的职业对其欣赏者有同样素质的要求——良好的品味、足够的修养、独到的眼光、无私奉献的精神和优秀的教育。 问题 令人生厌的工作未能保持过去假定的道德价值，曾经隐藏在工作伦理下的粗暴胁迫如今赤裸裸地、毫不掩饰地显现出来。 为了让那些已经皈依消费主义的人去从事那些经不起美学考验的工作，必须人为地创建一种没有选择、迫不得已、为最基本的生存奋斗的处境。只是这次不再会扯上什么崇高的道德救赎。 解决方案：使命是一种特权 工作的美学价值成为消费者社会的一个有力的层级化因素。诀窍不再是最小化工作时间以腾出更多休闲时间，而是相反，完全抹去工作与兴趣、爱好、娱乐之间的界限，把工作本身变为最令人愉悦的工作。 娱乐式工作是一种最令人羡慕的特权，那些有幸得到这种特权的人，一头扎进工作提供的强烈感官享受和令人兴奋的体验中。**“工作狂”没有固定的工作时间，他们7x24小时地专注于工作的挑战，不过他们并非过去的奴隶，而是当下最成功的精英。 具有使命感的工作成为少数人的特权，成为精英阶层的特有标志。 方案局限性 以明星、运动员为例：他们获得的东西多么令人赞叹，他们失去的东西就多么令人胆寒。代价之一是这种荣誉过于短暂，明星如同流星从不知名处跃入苍穹，最终又回到不知名处销声匿迹，运动员的成就几乎必然短暂，如青春一般稍纵即逝。 ”以工作为使命“是一种自我毁灭、快速消亡的生活，它不是一个贯穿一生的命题。 消费者社会下的穷人 # 工作伦理的最后贡献 # 界定了规范也就界定了不正常\n工作伦理规范将不正常概括在了失业现象中——”不正常“就是不工作。 穷人的长期存在往往被解释为缺乏工作岗位或者缺乏工作意愿 **充分就业的情况下也存在贫困，因此贫困现象不能用工作伦理的传播不充分来解释。\n如果普及工作伦理可以解决问题，那么”就业中的穷人“这个概念本身就是一种鲜明的矛盾。 把穷人的悲惨遭遇归咎于他们不愿意工作，指控他们道德沦丧，把贫穷说成是对罪恶的惩罚，这是工作伦理在新的消费者社会里能做的最后贡献\n消费者社会下的贫穷 # 贫穷并不仅限于物质匮乏和身体上的痛苦，也是一种社会和心理状况。 每个社会都有”体面生活“的衡量标准，贫穷则意味着被排除在”正常生活“之外。\n消费者社会中\n正常生活是合格的消费者的生活，他们专注于从各种公开的机会中选择，以获取愉悦的感受和生动的体验。 幸福生活的定义是：抓住了很多机会，错过的机会也很少，甚至没有，抓住最被人津津乐道、最被羡慕的机会，而且最好捷足先登，不落于人后。 消费者社会下的穷人\n被社会，也被其自身定义为有瑕疵的、有缺陷的、不完美的、先天不足的消费者 他们最痛苦的境况是：似乎永无止境的空闲时间加上他们无法利用这些时间。失业者无法以任何有意义的、令人满意的或有价值的方式安排时间——无聊 消费者社会下的无聊与幸福 # **消费时间不允许”无聊”存在，消费文化致力于消除它。 幸福的生活是绝缘于无聊的生活，是不断”有什么事发生“的生活，新鲜又刺激，因为新鲜所以刺激。\n想要缓解无聊就需要花钱。如果想要一劳永逸地摆脱这个幽灵的纠缠，达到”幸福状态“，就需要大量的金钱。欲望是免费的，但实现欲望，进而体验到实现欲望的愉悦状态，则需要资源。 消解无聊的常规措施对穷人来说是可望而不可及的，非常规措施又必然被视为非法。荒谬的是，挑战法律和秩序成为穷人最愿意用来对抗无聊的冒险。 **在消费者社会下，人们真正拥有的东西被淡化、被贬低，被较富裕的人锋芒毕露的奢侈消费所掩盖：”富人成为被普遍崇拜的对象“，财富本身成为大众崇拜的对象。富人受爱戴是因为他们能够随心所欲地选择自己的生活，并能随心所欲、不费吹灰之力地改变他们。\n穷人的绝对困境 # **穷人的贫困不但因为经济增长而加剧，也因经济衰退和停滞而加剧。\n因经济增长而加剧 无论现阶段的”经济增长“是指什么，随之而来的都是以”灵活的劳动力“替代铁饭碗，以”活络合同“、固定期限合同、临时性雇佣、裁员重组和”企业优化“替代工作保障——所有这些都在削减就业数量。 穷人”变穷“的同时，非常富有的人却变得更加富有，他们展现的生活模式越发高高在上，越发匪夷所思，令他们崇拜、觊觎，渴望效仿。这种”主观上的不满足感“以及随之而来的耻辱和污名化造成的痛苦，由于生活水平的下降和相对贫困恶化的双重压力而加剧。 第三章 福利国家的兴衰 # 什么是福利国家 # 福利国家传达了这样一种思想：国家有责任和义务保障其所有公民的”福利“——不仅仅是维持生计，而是在身处的社会中有尊严的生存 福利国家的概念将公共服务理念所蕴含的责任强加给国有的和国家资助的机构 公共服务理念——集体保障个体有尊严的生活 公共福利可以看作是一种集体保险，由集体的所有成员共同承担，它承诺按个体需求而非个体支付的保险金额进行补偿 公共福利原则的纯粹形式是个体需求的平等，它凌驾于消费能力的不均衡上 福利理念与工作伦理的协助与冲突 # 协作 主张以集体力量保障个体福利的人承认以工作支撑生活应该是一种正常状态，但由于很难为所有人提供稳定就业，为了实现工作伦理的愿景，便需要帮助那些落后的人，以支持他们做好返回工作的准备，此时福利国家能够很好地支持工作伦理，帮助它克服困难 冲突 公共福利的理念宣称，应该在任何时候都保障国家的所有公民”有权“过上体面的、有尊严的生活，即使他们对公共财富没有任何贡献。因此公共福利允许把公民生活与对社会的贡献分离开来，生产贡献只应在职业范畴中讨论，由此削弱了工作伦理最神圣、最不容置疑的前提——[[03books/工作、消费主义和新穷人#什么是工作伦理？]] 二者之间的争议远不止如此，最合理的解释是福利国家具有所有冲突的特征，且远不止这些特征\n福利国家的必然诞生 # 福利国家出现在以下压力或需要的交汇点：\n处于困境的资本主义经济，无法在缺失政治帮助的状态下只依靠自己的力量生存 有组织的劳工，无法在缺失政治帮助的状态下确保自己不受”经济周期“的影响 通过减轻最令人不能忍受的社会不平等来保护和重申社会不平等原则 通过边缘化无法参与再生产的人来刺激社会接受不平等 帮助社会成员安然度过不受政治控制的经济冲击 这些压力如此之大，以至于一般人都认为由国家管理的福利体系是现代生活自然的组成部分 很难设想不存在福利国家的现代社会 如果没有福利国家，生活的艰辛可能令人无法忍受\n**把福利体系”私有化“或者”去政府化“，看起来似乎都不过是空想者的白日梦 然而不到二十年后，空想成为了现实\n服务大众，还是服务特定人群 # 服务大众 # 服务大众的理由\n仅仅宣称人人享有自由是不够的，还必须确保所有人都能够并愿意行使他们根据法律拥有的自由 具有针对性的社会保险将消除人们对于丧失能力的恐惧。实现个人价值的自由不仅要免于匮乏，免于失业，也要免于对匮乏与失业的恐惧 如果允许恐惧像过去一样困扰人们，只会让受害者的队伍成倍增加，从而持续推高援助成本，因此，我们的认为是消除恐惧本身。 为了消除恐惧，需要确保那些即使因为幸运或未雨绸缪而”保有一些财产“的人，所得到的援助也”不会因为经济审查而削减“。 实际上，经济审查的废除从未真正发生过\n选择性社会保障正在无情蚕食普遍性社会保障 服务大众理论的美好设想 [[03books/工作、消费主义和新穷人#普遍反对的理由]]\n取消经济审查，会使受益群体（在这种情况下，即全体人口）认为福利国家的支出是值得的，毕竟这钱被用于提供”一个人能买到的“最好的、最慷慨的、最值得信赖的保险 权力和义务在这里能达到最适当（且最优）的平衡 把服务的范围用经济审查的结果来限定，社会就立刻分裂为二元：付出而没有得到任何回报的人和不付出就能有所得的人，利益理性于是和道德对立起来 经济审查的总体效果是分化而非融合，是排斥而非包容 实际上福利国家带来的影响\n由于事实上经济审查越发严格，新的、更小规模的纳税人群体使用政治力量把那些具有缺陷的公民归为另类，也借此完成了对自己的构建。他们不断吸纳自己的成员，不遗余力地把那些失败者边缘化，作为他们没有达到公认标准的惩罚。 通过对被排斥者的污名化，社会主流人群的真正或假定的价值得到了强化：“观察者通过构建他人来构建自己。“ 福利国家沦为只服务小部分人（大众眼中的低等人）的工具，其最重要的长期影响是政治的式微和主流民众政治热情的消退。 对大多数人来说，对政治的关注只剩下让财政之手远离他们的口袋，他们对国家几乎没有更多的期望 福利国家的衰败 # **这似乎是无情偏向经济审查带来的“意外后果”，是“准蓄意的”或“有导向但非计划”的结果\n时代的转变 # 过去，福利国家在长期的“劳动力再商品化”过程中发挥了至关重要的作用 通过对贫困家庭的孩子提供相应的支持，保证了资本主义工业可雇佣劳动力的稳定供给，这是任何公司或者集团都无法做到的 现在雇主们不再需要国家帮他们管理后备劳动力，多余的劳动力可能永远不会再成为商品，不是因为质量有缺陷，而是因为需求消失了，且这类需求也可以在遥远的国度中得到满足——全球化的影响 全球化时代 # 时代发生了转变，现在是以股票价值而非产品数量衡量企业的成败 劳动力在生产过程中的作用迅速下降 企业全球化布局的自由使投资福利的吸引力大幅下降，以更少的代价便可以获得等价甚至更好的效果——全球流动的自由消解了补充劳动力的经济负担 相较于把远方的劳动力招募到本土，不如自己直接去那里方便，成本更低 在这个星球上，部分地区已经充满了老于世故的消费者，但也还存在着广袤的处女地，那里存在着不需要激发消费欲望就能获得的顺从劳动力，那里的人为了生计卑微地工作\n资本主义再生产的逻辑 # 资本主义再生产的逻辑是：把消费者欲望作为主要的社会动员和整合力量，作为解决冲突和维持秩序的主要手段，从长远来看，这会使“劳动力成本过高”。那些被资本主义生产方式耕耘过的连绵土地迟早都会枯竭，必须寻找新的处女地、未开垦过的土地。 对资本的扩张和安全性来说，老套的国家援助变得无关痛痒。商人深知，如果想获得更好的收益，最好的方法是不再局限于本地。 福利国家的崩溃 # 现在，再支撑福利国家的利益关系中，最主要的利益关系已经被移除。失去了经济基础，整个利益集团分崩离析。对“劳动力再商品化”的投资已经没有任何收益，一旦被要求承担社会福利成本，优秀的商人就会利用新获得的全球化自由，把他们的资金和产业带到国外。\n心满意足的大多数 # 在一个又一个国家，大多数选民都支持那些明确要求削减福利的政党，或那些承诺降低个人税赋（最终也会导致福利的削减）的政党。增税已经成为了政客最禁忌，选民最憎恶的词语\n对福利国家的态度长期具有大众共识，但是在近半个世纪，这个共识从普遍支持走向普遍反对。这种大众共识的根本性变化非常值得探讨。\n讨论的前提 # 民主政体中中层选民一定是大多数，他们距离极端贫困有一定距离，但也不算富裕\n普遍支持的理由 # 表面来看是一种利他行为 支持由国家提供保障服务的人并不立即需要享受这种服务，某种程度上他们也不希望自己享受这种服务。 真正的原因或许只是他们缺乏自信 [[03books/工作、消费主义和新穷人#服务大众]] 需要利用国家的保障服务消除恐惧 普遍反对的理由 # 实际上，他们认为相对于质量低劣的国家保险，能够负担的私人保险会提供更多、更好的福利，这种观念改变了个体为福利体系的付出和福利体系为其带来的收益之间的平衡，或者说至少改变了人们对此的权衡 公共福利保障，用简单易懂的话来说，并不“物有所值”。 原因一是经济审查带来的长期影响，导致了福利服务质量的不断恶化,且造成了对福利领取者的污名化 原因二是消费者社会的到来和消费主义文化的深入人心，在消费者社会这个根据选择能力分层的社会，成为一个为人称道的有修养的鉴赏家是一种无上的荣耀，而处于没有选择的境地（领取社会福利），就会被消费社会所抛弃。 **福利国家体系和消费主义社会的氛围格格不入，这与它能提供的服务无关。产品的营销必须宣扬（至少口头上）对差异化和选择的崇拜，福利国家则必须追求公民生存环境、需求和人权的平等，他们是彼此对立的。\n为什么人人都想成为消费者 # 为什么这么多现代社会的居民会变成成熟的消费者？ 为什么大多数人现在更喜欢作为消费者进行选择，而不是规避风险，依赖满足所有基本需求的保障型供应？ 为什么大多数人都满足于只依靠自身资源，只依赖自己的聪明才智？ 平权运动的例子 # “平权运动”指在就业、晋升和升学方面优先照顾非裔和拉丁裔的运动 迎来了意料之中的抗议，因为很多白人家长对所谓的劣等生取代他们成绩更好的子女升入大学而感到费解和愤怒 但意料之外的是抗议者中相当一部分是非裔美国人，且数量越来越多，因为平权法案使很多“业已成功”的非裔遭受轻视和贬低——他们的成功有政治支持 竞争环境是由于平权法案而趋于公平，这是该法案不可否认的成功和历史性成就\n受平权法案的照顾，一个新的、自信的非裔中产阶级已经诞生 但这些受益者不愿意承认，他们之所以有这样的地位，并不是因为他们像其他人一样发挥了自己的智慧与勤奋，而是因为得到了帮助 他们大声又明确的宣布，如果他们“做到了”，那么其他人也能做到，如果有人做不到，一定是因为他们不够努力 必须强烈要求拆除“特权”，因为它每时每刻都在提示这自己“被贬损”（因为得到了帮助）的历程 **平权法案“自己完结自己的工作” 平权法案培养的是自己的掘墓人\n失去平权政策的保护，在德克萨斯法学院，非裔新生的占比一年便从5.9%下降到0.7%\n福利国家招致毁灭的成功 # 福利国家培养了一大批受过良好教育、健康、自信、自立、自主的人。这些人为了维护自己刚刚获得的独立，需要把“已获得成功的人有责任帮助尚未成功的人“这种社会共识连根斩断\n**同样的 福利国家”自己完结自己的工作“ 福利国家培养了自己的掘墓人\n工作伦理与新穷人 # 工作伦理的新春天 # 以工代赈 # 二十世纪末，工作伦理再次成为公众焦点，它在整治时弊的过程中作用明显 在美国的以工代赈计划中，工作伦理尤为引人注目 但总体来说它并没有显著减少贫困者的数量；也没有改善穷人的经济自给自足能力 新时代 # 如今，无论接受救济的穷人是否真的不愿意参加生产，都丝毫不会影响生产力的增长\n现在的企业不需要用更多的工人增加利润\n即使有工人的需求，在世界其他地方也很容易找到，且价格更便宜\n本地的贫困不断加剧\n证券交易市场无意中成为企业利益最真诚的代言人\n某国失业率快速上升时，证券市场没有任何焦虑的迹象，更谈不上恐慌，反而可能表现火爆\n定居者与游牧者 # 劳动力市场上的四类职业 # “引导者”——发明家、广告商、推广者和商人 各领域、各层次的教育工作者 从事“消费市场服务”的人——大部分是产品的销售者和培养消费者购买欲望的人 “常规劳动者”——被配置于传统的流水线，或新改进的自动电子化设备终端，如收银台 常规劳动者的特点 # 出售劳动力时面临的困难最小 容易被弃用，工作不稳定 很少有抗争意愿——收益小，风险大 具有审慎而有效的生存哲学——”今朝有酒今朝醉，明日愁来明日愁“，”各人自扫门前雪，莫管他人瓦上霜“ 常规劳动者的困局 # 定居者与游牧者\n常规劳动者的工作被公认为是脆弱的、多变的、临时的、短期的、偶发的，通常稍纵即逝 虽然工作内容是常规的、重复的，但雇佣关系不是 虽然最常规、最乏味、最没有尊严的工作只要有望长期持续，就有利于稳定、扎实、持久的人际关系的成长，但”劳动力市场的灵活性“给长期协作的可能性蒙上了一层阴影，更不用说对”共同事业“全心全意、无条件的承诺和忠诚。 如果你喜欢为之工作的公司，并期望未来一直和它携手同行，那么最多在下一轮的”外包“或”裁员“时，你就会受到伤害 常规劳动者的身体虽然在工作，却心不在焉。 工作仍然是生存是源泉，但不是生命意义的源泉，当然也不是培育人与人之间纽带的温室，它不足以支撑和维持道德信念和道德实践。 **在这个崇尚”灵活性“的世界，”工作伦理“的戒律显得空洞乏味。\n劳资双方的关系不再对称，依赖性也不再对等 求职者仍然”受缚于土地“，不能自由迁徙，只能依赖本地的工作谋生，资本现在则可以无拘无束地移动，不用在意距离和国界 过去常规工作者受到的长期雇佣导致这些”定居者“越来越勇敢，且有足够多的时间变得更团结、更强大、更坚固，如今这种情况已经不复存在。\n而金字塔顶端的”非常规工作者“成为了”游牧者“，他们生活在一个”没有固定价值观、对未来无忧无虑、自我主义和享乐主义“的社会，他们”享受新鲜事物、崇尚冒险精神、唯变化为永恒、以交融为富足“，他们都在不同程度上掌握并践行着”液态生活“的艺术\n面对”游牧者“强大的攻势，常规工作者已然失去了胜利的可能 如今没有哪种工作能免除失业，也没有人可以免除近来出现的”长期失业“——这个词现在已经被更准确地描述为”过剩“。\n从”失业“到”过剩“ # 失业 # 失业（unemployment)一词，之前通常用于指向没有工作收入的人 它表达出就业才是”正常态“ 这个假设 前缀”un\u0026quot;表示这是一种非正常现象——一种奇怪的、不正常的、暂时的现象 人们呼吁对其采取矫正措施 “充分就业”的愿景依旧岿然不动 过剩 # 过剩与失业不同，它没有任何哪怕是隐晦、含蓄的承诺，没有暗示这是“非正常”状态，没有暗示偏离轨道，没有暗示目前的痛苦是短暂的 “过剩”的人是多余的、编外的、不被需要的，他们要么出生在一个“饱和”的社会里，要么由于经济和技术进步变得不再必要 “过剩”的人被标记在经济平衡表的借方而非贷方，因为无论是现在还是可预见的未来，他们都不能增加社会财富，只能增加社会负担 就所有现实意义而言，如果他们不存在，经济会更好——他们应当被排除在经济活动之外 工作伦理价值的重塑 # 《欧洲公司从痛苦中获益——削减成本虽然不带来就业，但带来了利润》\n经济成功的“副作用”——就业岗位的减少，变得不再重要 过去，把工作神化为人类的最高职责、高尚道德的体现、法律和秩序的保障，以及治疗贫困的良方，这种做法与劳动密集型产业产生过共鸣，因为劳动密集型产业需要更多劳动力以增加产量。 如今的精简型、小型化、资本和知识密集型产业，则把劳动力视为生产力提升的制约要素\n这是对曾被奉为经典的斯密-李嘉图-马克思劳动价值论的直接挑战 劳动力过剩被视为灾难，所有寻求合理化（提升投入产出比）的努力首先会集中于进一步削减雇员数量的可能性 经济增长和就业率的提升实际上是相互矛盾的，技术进步以劳动力的替代和淘汰为标准 在这种背景下，工作伦理的劝诫显得愈发空洞，它不再符合产业的需要，也很难被描绘为实现国家财富的必经之路\n工作伦理的持续存在或有所复苏，是因为在这个消费者社会，人们希望它发挥新的价值 近来重新鼓吹工作伦理的目的，是为了“将值得帮助的穷人和不值得帮助的穷人分开，把责难倾倒给后者，以合理化社会对他们的冷漠”，因此“说明贫穷是个人缺陷的必然后果，进而促成对穷人和被剥夺者的漠不关心”。\n换言之，工作伦理虽然不再是减少贫困的手段，却能帮助调和社会众生和永恒存在的穷人之间的关系，有助于整个社会的安宁平和 底层阶级的浮现 # 工人阶级（working class) # 属于这样一种社会意象：这个社会中，富人和穷人有着不同的社会分工，又互为补充。 “工人阶级”让人联想到一个积极参与社会生活的阶层，他们对社会作出有益的贡献，并获取相应的回报。 下层阶级（lower class） # 属于社会流动性意象：这个社会中的人是流动的，所处的每个阶层都是暂时的，原则上可以改变。 “下层阶级”让人联想到一个被置于社会底部的阶层形象，他们可能向上攀登，从而摆脱当下的困境。 底层阶级（under class） # 属于这样一个社会意象：这不是一个完全开放和包容的社会，其真正的范畴小于社会各组分的总和。 “底层阶级”让人联想到那些被排除在阶级体系之外的人，他们没任何机会，也无法被重新接纳；他们没有容身之所，对社会没有任何有益的贡献，原则上不值得救赎。 底层阶级的群像 # 从行为界定来说，穷人指的是那些辍学者、无业游民和未婚生子靠社会福利生存的年轻女人。此外，底层阶级还包括无家可归 者、乞丐、酗酒和吸毒成瘾的穷人，以及街头罪犯。这个词很灵活，住在“廉租房”中的穷人、非法移民和青少年帮派成员也经常被归入底层阶级。事实上，这种灵活性也使该词成为一个标签， 可以用来污辱穷人，无论他们的实际行为如何。\n共同点：在其他人看来，他们没有存在的必要，正是因为完全无用才会被归入底层社会——若他们消失，其他人会生活得更好。 既然他们是完全无用的，他们带来的危险就占据了人们对他们的认知。 底层阶级的价值 # 无用和危险，属于盖里（W. B. Gallie）认为的“本质上有争议的概念”。所以，当它们被作为分类的标准时显示出了“灵活性”，能够精巧地囊括所有萦绕社会的邪恶魔鬼。在这个社会中，人们对任何有用性的持久产生怀疑，困扰于零散、游移的恐惧。这些概念帮助绘制的精神世界地图为接踵而至的“道德恐慌”提供了一个无限广阔的容器，已有的分类可以不费吹灰之力地吸收和驯化新的威胁，同时让散布的恐惧集中在 一个目标上——这个目标因具象化而使人安心。\n可以认为，这是底层阶级的无用性为社会提供的一种重要价值——这个社会中没有哪个行业或职业能够确信自己的长期有用性；这也是底层阶级的危险性为社会提供的一项重要服务——这个社会被太多焦虑困扰，人们根本无法分辨究竟在恐惧什么，如何减缓这种恐惧。\n底层阶级的浮现 # 应该不是巧合，当底层阶级进入人们视线的时候冷战正好趋于停止，冷战制造恐怖的力量迅速消散。苏联解体之后，关于底层阶级的讨论全面展开，迅速成为公众关注的中心。危险不再来自外部威胁，也不在于“内部敌人”——那些外国势力在我们内部建立的根据地和桥头堡， 那些敌人扶植的“第五纵队”。外国煽动、培育的政治威胁不复存在，危险无处扎根，必须委身于社会内部，在本地的土壤中生根壮大。有人倾向于认为，即使不存在底层阶级，它也会被创造出来。事实上，它确实恰到好处地出现了。\n这并不意味着社会上不存在乞丐、吸毒者和未婚母亲——每当有人质疑底层社会的存在时，总会指向这些“可怜又可恶”的人。然而，他们在社会中的存在丝毫不足以证明底层社会的存在。 把他们归为一类是一种分类决策，而非事实的裁决。把他们混为一体，指责他们是无用的，会给社会的其他部分带来可怕的危险，这是一种价值判断而非真实叙述。 最重要的是，虽然底层阶级的概念基于一个假设，即社会（能使社会存活的一切事物的集合）可能小于其组分的总和，但这个概念指代的底层阶级却大于其组分的总和：这种归类行为给其组分加上了它自身没有的新特征。 实际上，“未婚母亲”和“底层女性”并不是同一种人，把前者归类为后者花费了大量的努力（虽然思考很少）。 用于底层阶级的工作伦理 # 最初的底层阶级概念 # 由冈纳·缪达尔（Gunnar Myrdal）在1963年使用的，用来指出去工业化的危险。 去工业化似乎使越来越多的人口永久失业并无法再就业。这并不是因为失业的人自身的缺 陷或道德上的瑕疵，纯粹是因为缺乏就业机会；也不是因为工作伦理无法有效激励，而是因为社会没能按照工作伦理的规则来保障生活。 在缪达尔看来，底层社会的成员是被驱逐的受害者，他们在社会中新的定位并非因为自己选择了退出，而是经济逻辑的产物，受害者对之无法控制或施以影响。 大众视野下的底层阶级 # 1977年8月29日，通过《时代》杂志的一篇封面报道，底层阶级的概念才闯入公众视野。 其呈现的是一种完全不同的意义：“一大群棘手的、与社会格格不入的、怀有敌意的人，危险性远超所有人的预期。 他们是不可理喻的：美国底层阶级。 ”定义之后附有一长串名单，包括了少年犯、辍学者、吸毒者、单身母亲、抢劫犯、纵火犯、暴力罪犯、未婚母亲、皮条客、毒品贩子、乞丐。 这些名字使正派人士们恐惧，是他们良心深处的隐忧。 “棘手”“格格不入”“怀有敌意”，从而不可理喻。伸出援手也没有意义，完全无济于事。 这些人无药可救，他们自己选择了病态的生活。 不可理喻意味着工作伦理也无法规劝。这些自闭者拒绝他人的善意，劝告、诱导、唤起良知都无法穿透他们的心墙。他们不仅拒绝工作，懒惰寄生，而且对工作伦理所代表的一切充满敌意。 底层阶级的“选择”与“自由” # 事实\n“底层阶级”并非贫穷导致，或者说，至少不能仅仅用贫穷来解释。 即使能够消除贫穷，也不可能消除底层阶级。 推论 堕入底层阶级一定是因为贫穷之外的原因。 这被归因于心理或行为上的疾病，在贫困时这些疾病可能会更加频繁地发作，但贫困并非决定性因素。 结论 沦为底层阶级变成了个人选择问题——无论有意，还是无意。 即使有些人错过了摆脱贫困的机遇，或努力以失败告终而沦为底层阶级，这也是因为他们的选择。在一个选择自由的国度里，没有做应该做的事，通常被不假思索地解释为作出了其他选择——在这个场景下， 是选择了“反社会行为”。 堕入底层阶级是自由的一种体现。在自由的消费者社会里，限制一个人的自由是不被允许的，但很多人认为应该限制那些滥用自由且威胁到他人自由的人，他们骚扰、纠缠、恐吓、捣乱、给他人的良心造成负担，并用各种手段摧毁其他人的生活。 底层阶级问题和贫困问题被分开 影响 在这个以喜欢诉讼著称的社会里，可以避免底层阶级声称自己是社会机能失灵的受害者，剥夺他们“索赔”的权利。无论案件如何推进，举证责任都公平公正地转移到“底层阶级”身上。他们必须首先证明自己的善意和决心。 底层社会的异常使得贫困问题“正常化”。 被置于社会认可界限之外的底层社会，只占“公认的穷人”的一小部分。 正因为底层社会是一个如此重要又紧急的问题，所以大部分非“底层”的贫困人口就算不上急需解决的问题。 正如堕入底层是一个选择问题，脱离贫困也是个选择问题——如果作出的是正确的选择。穷人沦为底层阶级是选择的结果，这个观点暗示的是，他们完全可以作出另一种选择，使自己从困境中解脱出来。 在消费者社会“选择贫困” # 消费者社会有一个没有争议的、核心的、不成文的规则——自由选择需要具有竞争力：行使选择权的技能和决心。\n选择自由并不意味着所有的选择都是正确的，因为既有好的选择，也有坏的选择。最终作出的选择是是否具有竞争力的证据。 底层社会是错误选择者的集合，证明了其成员“选择无能”。 无能是富足社会中的贫困持续存在的最主要原因，也是所有旨在消除贫困的一系列国家政策惨败的原因。穷人纯粹是缺乏能力去享受工作生活，他们作出了错误的选择，把“不工作”置于工作之上。 底层阶级的工作伦理 # 永远不缺少机会，我们不都是活生生的例子吗？但是，必须具备发现机会的能力，具备拥抱它们的能力：一些智慧、一些意愿和一些努力。穷人很明显缺少这三种能力。 穷人的这种缺陷，总体来说是个令人欣慰的好消息。我们是负责任的，为穷人提供了机会。穷人是不负责任的，拒绝接受这些机会。 面对穷人顽固不化的工作态度，我们只得放弃提供就业机会的努力。 工作伦理只帮助愿意接受帮助的人，工作的机会就在那里，剩下的要靠穷人自己争取。他们无权再向我们提出其他要求。 一开始，工作伦理是一种非常有效的手段，它可以帮助急需劳动力的工厂迅速扩充人员。随着劳动力迅速变成提高生产力的障碍，工作伦理仍然可以发挥作用，但这次是作为另一种有效手段：洗涤社会中正常人的双手和良知，帮他们从抛弃同胞致使同胞永久失业的罪责中摆脱出来。在对穷人的道德进行谴责的同时，对非穷人的道德实施赦免，通过这种双管齐下的方法，达到双手和良心的洁净。\n贫穷即犯罪 # 社会政策必须公正而坚定地抵制消极的穷人，直到理性被重新唤醒，直到他们自身土崩瓦解。\n社会秩序的构建 # 每种社会秩序都会制造出一些威胁它们自身的危险形象。每个社会会按自己的标准孕育为之奋斗的愿景。这些威胁是关于社会选择的方式方法、关于社会当下和长期生存方式的社会内部矛盾的投影。一个社会如果对自己的生存方式缺乏自信，就会产生围城心态。攻击城墙的敌人是它自己“内部的恶魔”：被压抑的、环绕着它的恐惧渗透进它的日常生活，渗透进它的“常态”。为了长盛不衰，这些恐惧必须被逐渐挤出，被塑造为一个异端形象：成为一个有形的敌人，人们可以与之不断斗争，并有望征服它。\n根据这条普遍性规则，传统的、建立秩序又深陷于秩序的现代国家面对的是革命的危险。敌人是革命者，更确切地说，是头脑发热、胆大妄为、过于激进的改革者，他们试图用一种新秩序取代当前的国家秩序，新的秩序意图颠覆现行秩序赖以生存的每一项原则。\n新的社会秩序 # 社会秩序的自我形象发生了变化，威胁的形象（秩序的负面形象）也获得了新的形态。\n底层阶级在当今富裕社会最重要的作用之一，就是吸纳恐惧和焦虑，过去强大的外部敌人扮演了这个角色，但他们已不复存在。 底层阶级是内部的敌人，注定要取代外部敌人，成为保持社会健康的关键药物，成为源于个体不安全感的社会紧张的安全阀。 将贫穷转化为犯罪 # ![[91Excalidraw/工作、消费主义与新穷人.excalidraw|2500]]\n越来越多的行为被归类为犯罪，但这并非消费主义社会全面发展、囊括一切的障碍。恰恰相反，这是其天然的副产品和先决条件。\n贫困从社会政策的问题变成了刑法学和典狱学问题。穷人不再是消费者社会的弃儿，他们在全面的竞争中败下阵来，彻头彻尾地成为社会的公敌。 依赖救济的人和毒贩、强盗、杀人犯之间，只有一条能够轻易跨越的纤细界线。依赖救济的人是犯罪集团天然的温床，让人们依赖救济生存无异于支持犯罪。\n逐出道德义务的世界 # 把贫穷与犯罪联系起来还有另一个作用：把穷人从道德义务的世界中驱逐出去。 道德的本质是为弱者、不幸的人、受苦难的人谋求福祉的责任冲动，给贫穷定罪可以消除和减弱这种冲动。\n工作伦理与道德 # 现在不工作的穷人已经不是“后备劳动力”，帮助他们保持良好的状态以备在需要时积极参与生产失去了经济意义。但这并不意味着为他们提供有尊严的生活条件没有道德意义。他们的福祉可能与提高生产力和利润率无关，却仍然与人类应有的道德情感、人文关怀以及人类社会的自尊紧密相关。\n早期时期 # 把穷人带进工厂去工作可能符合商品生产者和商人的利益（这些利益甚至可能为工作伦理的宣传注入了最大的动力），但它呼应了公众的道德敏感——他们对失业者所遭受的苦难感到担忧、不安和羞愧。 鉴于新兴的大规模工业似乎对不断增长的劳动力供应有着无尽的渴求，道德关怀可以在传播工作伦理的福音中找到一个合法又现实的出路。可以说，资本的利益与整个社会的道德情操有了一次历史性邂逅。 当今时期 # 现在的情况有所不同，表面上没有什么变化的工作伦理不再是道德情感的出口 而是成为20世纪末“中立化”（adiaphorization）的有力工具 “中立化”进程中的一个行动，是宣布它在道德上是中立的，或者说，让它免于道德评价，接受道德标准之外的其他标准的评价。 是否遵守工作伦理的号召，现在成了检验是否有资格获得道德同情的标准。 凭借这个进程中，道德谴责不再适用于道德上可憎的行为 \u0026ldquo;准穷人“一旦失败，就会自然而然被认为是他们自己选择把自己排除在道德义务的边界之外。 社会大众于是不再对他们的困境负有任何责任，也不会因为背弃了自己的道德义务而内疚。 解决道德冲动 # 永远不可能彻底扼杀道德冲动，所以彻底脱离道德义务也不现实。 用不工作的穷人道德败坏且具有犯罪倾向的新闻持续不断地轰炸，或许能够成功地压制大众的良心，但道德冲动无法消除的残余始终存在，它们一次又一次地在寻找出口。\n慈善盛宴 # 定期的“慈善盛宴”提供了这样的出口——它们通常由耸人听闻的苦难或毁灭性的悲惨景象引发，是一种大规模但短暂的道德情感的爆发。 然而，所有的慈善盛宴都是为了间接强化（而非破坏）日常的规则。大规模慈善的景象使日常的镇静和道德的冷漠更容易忍受。最终，它们强化了在道德世界放逐穷人的信念。 媒体的辅助手段 # 操持这些“慈善盛宴”的媒体运用了三种相互关联的手段。\n关于饥荒或者人们被迫背井离乡、无家可归的新闻，总在暗示，在“电视中”的人们死于饥荒和疾病的那片遥远土地上，也诞生 了“亚洲小龙”——虽然所有“小龙”加起来也不及亚洲人口的百分之一。 饥荒和无家可归是他们自己的选择。其他选项是存在的，然而他们缺乏勤奋和决心。 穷人应该对自己的命运负责。他们可以像“亚洲小龙”一样，选择勤奋节俭的生活。 这些新闻的行文把贫穷降格为仅仅是饥饿范畴。 贫困的真实规模被降低了，今后的任务也被局限在帮助饥饿的人寻找食物。 媒体展示的可怕画面与受指责违背工作伦理的穷人困境之间的联系，被小心翼翼地回避了。被展示的是受苦的人和他们遭受的饥饿，但无论观众如何睁大眼睛，都无法在画面中找到任何工作器具、可耕作的土地或牲畜。 媒体所呈现的灾难场面，也以另一种方式鼓励了日常道德的撤出。 只有在极少的情况下，在撇清与战争、屠杀的关系之后，我们才会听到轻描淡写的声音叙述着杀人武器正被使用。 在更少的情况下，我们才会被提醒虽然知道却不愿提及的事情：那些把遥远的土地变成杀戮战场的武器，都是我们的军工厂提供的。 逐出道德 # 经济发言的时候，道德最好保持沉默 清醒、理性地计算成本和收益。在这些人身上花钱等同于浪费，所有人都同意，浪费是不能接受的。 一说到我们（富人们）对世界上穷人的持续痛苦负有集体责任，经济计算就会占据上风，自由贸易规则、竞争力和生产力取代了道德准则。 单向的工作伦理 工作伦理阐述了那些在生存中挣扎的人的职责，却只字未提那些超越了维持生计、有着更高层次追求的人的职责。特别是，它否定了前者对后者的依赖，于是免除了后者对前者的责任。 工作伦理令“依赖”这种想法名誉扫地，依赖逐渐成为一个肮脏的字眼。 福利国家体制被指责培养了依赖性，问题被提升到自我延续的文化高度，这是去除福利国家体制的一个冠冕堂皇的理由。 这场反对依赖的圣战中，道德责任第一个被波及，因为“他者”的依赖就是自身责 任的镜像，是所有道德关系的起点，也是一切道德行动的基础假设。 在诋毁穷人的依赖性是罪恶的同时，当前演绎的工作伦理，给富裕阶层的道德顾虑带来了最大的慰藉。 第五章 全球化之下的工作与过剩 # 现代化与再造 # 现代化 # 现代生活方式在于持续不断地重塑世界。使事物变得不同、变得比目前更好的冲动，以及紧随其后能够增强这些冲动的实践，就是人们常说的“现代化”（modernization）。\n现代化不应该被解释为“通往现代性 （modernity）之路”。如果那样，它就变成了一系列“变得更现代”的行动。一旦这些任务完成，现代化就戛然而止。 现代化就是现代性，一旦停止，现代性也随之消亡。 现代化是对世界和人们生活方式的一种难以抑制、令人上瘾的“重塑”，是“现代生活方式”的同义词。 这种生存方式使它有别于其他（传统主义）生存方式。那些生存方式大体上主要致力于社会的持续再生产，最好形式上不要发生任何变化。 永久和持续的现代化是现代性的基本特征。 然而，现代历史的大部分时间里，现代化都被看作是一个有期限的过程或任务，一项“有终点线”的事业。\n这与其内在的自我推动趋势是相悖的。赋予它的任务是清理历史遗留的众多不完善、不协调、不健全的东西，使其达到一个不需要进一步修正（更不需要推倒重来）的形式。 因此，现代化被视为一种工具，一种用来实现理性社会这个终极目标的工具。 再造 # 自古以来，没有什么可以真正从零开始——尽管那些“处女地”被入侵和殖民之前被断言“一无所有”，以（错误地）开脱殖民者的行为。 当需要治疗的病症很大程度上是医源性的，即病症是治疗本身的副产品，当重组的对象大多数是过去重组的产物，是过去破坏性喧嚣的恶报时，幻觉就不再能够维系。 除了装睡的人，大家都清楚，所有的创造都是创造性的破坏。所有的创造都会留下一些具有污染性且常常有毒性的残渣 ——“合理化”的废弃物。合理化就是分离合理化对象中有用的（无论如何定义与衡量“有用”）部分和“无用”（过剩）的部分，并对后者进行清理。\n近年来商业战略的一个最重要的原则是”间歇性体系重塑“，并将其破坏性行为隐藏在”再造“这个令人得意的名称之下： 再造意味着“少花钱多办事”——精简 对人的“精简”意味着更多的过剩 关于再造，最显著的事实是工作岗位的缩减 殖民主义，还是剩余劳动力输出 # 从一开始，现代就是大迁徙的时代。\n移民解决过剩 # 通过大规模驱逐过剩人口，把本地产生的“社会问题”输出到远方的原因\n本地竞争激烈，通过输出过剩人口给其他国家还能获得协议收入 担心拥挤在城市里“过剩的人”成为不安定因素。 移民是由多种元素决定的\n一方面，过剩人口无法在自己的国家找到有报酬的工作，或无法维持既有或继承的社会地位，这通常出现在先进的现代化进程主导的地区。 另一方面，同样因为快速的现代化，产生了过剩人口的国家（即使是暂时的）在技术和军事上优越于那些尚未开 始现代化进程的国家。这种优越性足以使他们把这些落后地区视为或作为“无人区”（或在镇压“土著人”的反抗过程中，或在殖民者觉得安抚太过麻烦而挥舞武力的过程中，把这些区域变成无人区）：也就是说，大规模迁徙的条件已经成熟。 殖民主义，还是剩余劳动力输出 # 查尔斯·达尔文对欧洲主导的“蛮荒开化”的总结，“欧洲人走到哪里，死神就降临哪里”。\n具有讽刺意味的是，为了开辟新的场所（用于堆放因国家经济进步而产生的人类废弃物的垃圾场）安置欧洲的剩余人口，而对原住民赶尽杀绝，是同样以进步的名义进行的，欧洲的剩余人口摇身一变成为“经济移民”。 例如，西奥多·罗斯福（Theodore Roosevelt）就把消灭美洲印第安人表述为对文明事业的无私奉献：“本质上，正义站在殖民者和开拓者这边：否则这片伟大的大陆只能成为肮脏野蛮人的庇护所。 ”罗卡将军（Roca）是阿根廷历史上臭名昭著的“征服沙漠”事件的指挥官，“征服沙漠”这个委婉的名字背后是对潘帕斯地区的印第安人的“种族清洗”。罗卡将军向他的同胞解释说，他们的自尊迫使他们“尽快以理性或武力的方式打倒这群野蛮人。他们破坏了我们的财富，阻止我们以法律、进步和自身安全的名义，占领共和国最富饶最肥沃的土地”。 解决本土问题的全球化策略之兴衰 # 今天，地球已经满负荷。\n“地球已经满负荷”是社会学和政治学的论断。 它不是指地球的状况，而是指地球上居民的生存方式和方法。它标志着“无人区”的消失， 标志着能够被界定或被视为无人居住、没有主权管辖的土地的消失，标志着可以作为殖民地的土地的消失。 这样的土地在现代历史的大部分时间里，在持续的“现代化”进程影响之下，扮演着人类垃圾场的重要作用，现在它们基本上不复存在。 制造“人类废弃物” # 更正确地表述为，制造无用的人（“过剩”“不必要”“编外”“冗余”的人口，即那些不能被留下、也不被接纳的人口） 是现代化过程不可避免也难以处理的结果，与现代化如影相随。 这是秩序建立（每种秩序都会丢弃现存人口中“不协调”“不合适”或“不受欢迎”的部分）和经济发展（经济发展不可能不破坏和废弃之前行之有效的谋生方式，也必须剥夺一些从业者的生计）不可避免的副作用。 本土“人口过剩”问题的全球化解决方案 # 在现代历史的大部分时间里，若以地球上的现代（过分现代化）区域为参照，世界上还有庞大的区域（“落后”“不发达”的地区）没有受到现代化压力的影响，从而也就没有“人口过剩”的问题。 在现代化的进程中，这些“未开化的”“欠发达的”地区往往被视为或作为能够吸纳发达国家过剩人口的土地，是出口“过剩人口”的天然目的地，是倾倒现代化人类废弃物的理想垃圾场。 清除和处理全球“现代化”过程中产生的人类废弃物，是殖民主义和帝国主义征服的最深层意义。 这两个过程都是 因为发展水平严重不平衡力量差距持续拉大的必然结果，这也导致现代 生活模式被限制于一个相对较小的“特权”区域。 解决方案的衰败 # 现代化的进程在缩小”垃圾场“ 现代化的进程同时在增加”剩余人口“的产出 全球化已经成为第三条过剩人口的生产线（另外两条是秩序建设和经济、技术的进步），也是最多产、最不受控制的一条生产线。它为旧问题披上了新衣，赋予旧问题全新的意义和前所未有的紧迫性。 工作和贫穷问题的全球化新维度 # “全球化正在产生一种全球经济。在这个体系中，任何一个国家试图阻止其工人贫困化的努力只能导致他们丧失工作机会。” 不要问丧钟为谁而鸣，丧钟为所有人而鸣。\n不公平的全球化 # 人类的生存现状，并不像官方倾尽全力宣传的那样冠冕堂皇。他们说我们身处一个“地球村”，“最偏远的雨林部落的居民们在笔记本电脑上辛勤工作” 我们应该教育我们的孩子 让他们认识到不公平：我们这些坐在桌子后面敲打键盘的人的工资，是那些打扫厕所弄脏双手的人的10倍，是那些在第三世界国家制造键盘的工人的100倍。 我们应当让他们看到问题所在：先实现工业化的国家的财富是尚未实现工业化的国家的100倍。\n全球化远没有做到为所有人提供就业和技术，“一些跨国公司正在压榨最贫穷的落后国家，以获取难以想象的利润。 计算机只是号称要创造平等世界的众多商品的一个代表，事实上，这些商品确实取悦于消费者，但根本无法拯救其生产者于苦难。 现代化全球化的后果 # 曾经能够定期、及时地清理少数现代化地区过剩人口的通道被堵死了，过剩人口的产生超过了其回收能力。社会只能逐渐将排除异己的利刃转向自己。 所有“剩余”的人都留在“围墙”之内，和“有用的”“正常的”人混在一起。这样一来，暂时丧失工作能力的人和被永远废弃的人之间的界限逐渐模糊，不再清晰可辨。现在，“过剩”不再是一部分人的问题，所有人都将面对这种可能性，人们的社会地位将不断在两级之间摇摆。 刚刚加入现代化大家庭的国家，终于体验到几百年前现代性先驱所经历的企业与家庭的分离，以及所有随之而来的社会动荡和人类苦难，但本地产生的问题，却不再能够 获得全球化解决方案：可以轻松安置“过剩”人口的充沛“空地”和“无人区”。\n部落战争和大屠杀、增生的“游击队”（通常只是伪装的土匪团伙）之间相互火并，在这些过程中“过剩人口”（主要是在国内失业的、没有前途的年轻人）也被消灭和吸收。这是“现代性后来者”被迫实施的“本地解决方案”之一。成千上万的人被赶出家门，死于杀戮，或被迫逃出国境。\n迄今为止，在这些后来者的土地上，唯一快速发展繁荣的产业也许就是大量生产难民。\n社会问题转为法律和秩序问题 # 过去那些致力于争取减少国家干预，以解放资本及其对于劳动力的使用，并取得显著成功的人，今天却在拼命要求增加国家干预，以遏制放松就业管制和落后区域社会保护恶化造成的恶果。\n这种明显的心理变化严格符合从回收利用过剩人口到弃置过剩人口这个逻辑过程。 这是一次彻底的转变，需要国家权力强有力的介入和协助。对此，国家义不容辞。 首先，是取消那些防止个体从生产力机器中（假设是暂时的）被驱逐或跌落的集体保险。 之后，是设计和建造新的、安全的废弃物处理场。 社会问题犯罪化 # 社会国家正在逐步地，不可逆转地变成亨利·A.吉鲁（Henry A. Giroux）所说的“卫戍型国家”（garrison state）。他将其描述为一个越来越多地保护全球跨国企业利益的国家，“同时在国内加强了压制和军事化程度”。 压制增加并取代了同情心。真正的问题被忽视了，例如城市中的住房紧张和大量失业，这是人们无家可归，年轻人游手好闲，以及毒品泛滥的原因。取而代之的是倾向于训诫、遏制和管制的相关政策。\n“无用之人”大规模聚集并迅速膨胀，看上去会变成持续的、永久的存在。 这要求采取更严格的隔离政策和极端的安全措施，以免危及“社会的健康”以及社会系统的“正常运转”。 既然“无用之人”已经不能被放逐到遥远的垃圾处理场，也不能被放置在“正常生活”的边界之外，那就需要用密闭的容器将其封存起来。 监狱的新作用 # 在回收利用过剩人口的时代，监狱发挥着“矫正部门的深端作用”，而今天，监狱“被更明确地视为一种驱逐和控制的机制”。 狱墙，而非狱墙内发生的事情，“被视为这种机构最重要也最有价值的元素”。 监狱的主要目的，或许也是唯一目的，不是暂时性处理过剩人口，而是对其进行终极的不可逆的处理。一旦被拒绝，永远被拒绝。 一言蔽之：与许多其他社会机构一样，监狱的任务已经从废弃物回收转变为废弃物处理。现代性的全球性胜利以及地球的饱和使得废弃物处理的通道不再有效，现在，监狱被指派到这场战争的前线。所有的废弃物都有潜在的毒性，或者，被定义为废弃物就是被认为具有污染性，是潜藏的炸弹，总是会扰乱事物的正常秩序。如果回收利用无利可图，回收方案（无论如何在现今的环境下）也不再现实，那么处理废弃物的正确方法就是加快其“生物降解”，同时尽可能安全地将其与普通人的居住环境隔离。\n可以说，监狱是把穷人和失业者（更准确地说，无法就业的人） 从“社会问题”范畴转移到法律秩序范畴的过程中采用的手段，是消除他们对于整个社会潜在的破坏性影响的投资。所有这些手段，如不断扩展的城市贫民窟、了无生气的难民营，都涉及由安保人员提供的空间隔离服务。社会工作者和社会福利人员已经被他们完全取代。 从社会国家到“安全国家” # “社会国家”（social state）是欧洲民主历史长河的最高成就，直到最近仍占据着主导地位，但今天却在逐渐衰退。\n社会国家的衰退 # 社会国家将其合法性，以及公民效忠国家、服从国家的合理性，建立在以下承诺上： 保护自己的公民，保护他们不被裁员、不被排斥、不被拒绝，帮助他们对抗命运的冲击——不因个人不足或不幸而沦为“过剩人口”。 简而言之，承诺公民生活的确定性和安全性，对抗混乱和偶然性。如果有人不幸跌倒，身边的人会拉住他们的手，帮助他们再次站起来。 现在的国家无法兑现社会国家的承诺，政治家也不再热衷于重复这个承诺。 “安全国家”的产生 # 每个意图解除社会国家的政府的当务之急，是寻找或发明一个新的“合法配方”（legitimation formula），使国家权威和纪律要求能够赖以生存。 背景 是否会成为经济进步的“附带牺牲品”，现在是由自由流动的全球经济决定的，国家政府无法保证避免。 加强同样自由流动的恐怖主义威胁导致的对于个人人身安全的恐惧，然后承诺增加安保力量，投入大量监控设备，扩大监控范围，进行更频繁的安全检查、更多先发制人的打击和预防性逮捕，以保障这种安全，似乎是一个可行的权宜之计。 理论 人们每天都身处市场造就的切实不安全感之中，政治力量对这种不安全感无能为力，只能听之任之。 相反，“被包围的城堡”的心态，个人身心安全和私人财产无时不处于威胁之中的心态，是可以积极培养的。威胁必须被渲染上最邪恶的色彩，这样一来，无形的不可预测的威胁，就可以作为一个非常事件展现在惊慌失措的公众面前，当然更重要的是让他们认识到国家机关应对这些威胁的卓越能力、警惕性和良好意愿。 方案 中央情报局和联邦调查局几乎每天、每周都在向美国人民发出警告，警告他们的安全即将受到威胁，让他们处于持续的安全警戒状态，并将个人安全牢牢安放在最多样化的、四处弥漫的紧张局势之中。美国总统不断提醒他的选民，“一旦不慎让一丝不安定因素流入国内，我们就会遭受前所未见的灾难”。\n结果 策略受到其他众多政府的热切关注，它们纷纷效仿，把社会国家亲手埋葬。民众普遍要求建立一个强大的国家权力，帮助他们重燃希望，对抗过剩，限制废弃物，只是这种需求不再建立在社会不安全和社会保护之上，而是建立在个人的脆弱性和人身安全之上。 问题\n“附带伤害”（collateral damage）是一个新生词，专门用来指代世界新边域环境中的过剩人口。这种新边域环境被无法抑制的猛烈全球化力量制造出来。至今为止，全球化驱动有效抵制了所有驯服和监管的尝试。与现代过剩人口有关的各种恐惧压倒了更传统的对于过剩本身的担忧和焦虑。无怪乎他们被热切地用于构建（以及解构）新的全球权力等级。\n第六章 新穷人的前景 # 秩序与规范 # 生存的方式多种多样，但每个社会只会选择它偏爱或容许的方式。如果我们把某个人类的集合称为“社会”，那就意味着这些人归属于同一个集合，构成了一个整体。这正是社会作出选择的结果。虽然很少是“刻意”的选择，即勘查多种可能性后选择最有吸引力的那种，但正因为是没有经过设计的不经意的选择，它也就不会被轻易放弃。正是这种选择，或者说这种选择的持续沉淀，使得不同的集合大相径庭，当我们谈论不同的社会时，谈论的就是这种不同。一个特定的集合是否是一个“社会”，它的边界在哪里，谁属于或不属于这个集合构成的社会，都取决于作出选择和推动选择的力量，取决于它对个体的控制力和个体的服从程度。这种选择归结为两种强制力（或者说，一种具有两种效果的强制力）：秩序和规范。\n秩序 # 当代的伟大小说家、哲学家米兰·昆德拉在《告别圆舞曲》中描述了所有已知社会中显然存在的“对秩序的渴望”: 渴望把人类世界变成一个无机的世界，在那里一切都完美运行，按部就班，服从于一个超越个体的系统。然而，向往秩序就是向往死亡，因为生命本身就是不断破坏秩序的过程。或者换句话说：对秩序的渴望是一种堂皇的托辞，是强烈厌世的借口。\n事实上，对秩序的渴望未必源于厌世，却会促进厌世，因为它为厌世支配的所有行为提供了一个借口。 任何秩序都在不顾一切地把一致性、规律性和可预测性强加给人类世界，但人类倾向于多样化、反复无常、不可预测。 正如柯奈留斯·卡斯托里亚蒂斯所言，人类是“一种能够创造其他事物的存在，是变化的源泉，因此他们也不断改变自身”，人类的世界（除非是墓地）不可能是同一的、规律的、可预测的。\n人的存在就意味着不断选择并推翻选择，而要阻止人们进一步选择，使当下的选择不能被推翻，则需要付出相当大的努力。只有出于“选择质量”的考虑，向往秩序才可以想象。 任何一种秩序模式本身就是一种选择，它想要取代所有其他选择，终结所有进一步的选择。 不过，终结选择是不可能的，因为无论是否有意，是否欢迎，厌世必将随之而来。怀疑、厌恶和憎恨，这些糅合出厌世的情绪和态度，是人类与生俱来、根深蒂固、不可救药的怪癖，是无止境混乱之源。 规范 # 规范是秩序模式在人类行为上的投影。 规范告诉人们，在一个秩序井然的社会中，有秩序的行为意味着什么； 规范把秩序的思想翻译为人类的行为选择。如果说任何秩序都是一种选择，那么规范也是如此。一旦确定了秩序，也就限定了可选的行为模式。 规范认定了某些行为是正常的，除此之外的其他行为则不正常。“不正常”意味着偏离了规范许可的模式。它会一直延伸到“背离”（deviation），这是“不正常”的极端表现。如果一种行为不仅不符合规范的要求，而且超出了可容忍的边界，就会引发纠正性干预或惩罚性干预。在单纯的不正常和更邪恶的背离之间，从来没有明晰划定的界限，其划定规则常常会引发激烈的讨论。因为，容忍限度问题决定了两者的区别。 对秩序与规范的反思 # 秩序与规范的正确性 # 对秩序和规范有意识的关注（这确实是个议题并在社会中被人们讨论）表明，还有很多事情没有达到预期，这些事情不能被放任自流。 秩序和规范的概念（一旦这两个概念被创造出来，人们就能看到关于秩序和规范的问题，并依据这两个概念给现实中的要素分类），正是源于对于现状的不满以及想要积极改变现状的冲动。因此，这两个概念都是“积极的”“建设性的”：它们鞭策和推动着人们把现实提升到某个尚未完全达到的水平。谈论秩序和规范，这种行为本身就是其强制力的一种有力手段。 秩序与规范的问题 # 然而，秩序和规范暗示的“应该”变成了“必须”，忽略了大量的人类现实。\n如果它们包容一切，能够囊括所有人、也囊括人们做的所有事，那它们就失去了意义。 秩序和规范旗帜鲜明地宣告，不是所有现存事物都可以被包含在这个公设的、正常运作的集合体中，也不是每个选择都被许可。\n秩序和规范的概念是对准社会现状的尖刀，传达的首先是分离、截断、切除、驱逐和排斥的意图。它们通过关注“不恰当的”来推行“恰当的”，把现实中那些被剥夺了生存权且注定被孤立、放逐和灭绝的部分挑选出来，加以限制和污名化。\n秩序的设立和推广意味着实施驱逐——把一种特殊的管理制度加诸将被驱逐的人，使他们屈服于这种制度，从而驱逐他们。\n另一方面，规范（任何规范，工作伦理的规范只是其中之一）则间接地发挥着作用，使得驱逐看上去更像是自我边缘化。\n就秩序而言，被流放、被驱逐的是那些“违反秩序”的人；就规范而言，则是那些“不符合规范”的人。无论哪种情况，责任主要都在于被驱逐者，秩序和规范都预置了责任，先验地决定了“罪”与“罚”。 是被驱逐者自己错误的行为，使他们成为被驱逐的对象，他们自己需要承担主要责任。因此被驱逐表现为社会性自杀的结果，而非社会性处决的结果。 被驱逐者的过错在于没有付出努力或没有付出足够的努力避免被驱逐，他们甚至自甘堕落，使被驱逐成为自己必然的宿命。驱逐他们不仅是净化环境，也是一种道德行为，是合理的奖惩分配，是正义得到伸张；驱逐的决策者和执行者可以认为自己是正义的，因为他们正在捍卫法律和秩序，正在守护社会的高尚价值和标准。\n这些观点忽略了一种可能性（也阻止人们思考这种可能性），被驱逐的人可能根本无力对抗自己不幸的命运，更遑论控制。有些人可能只是因为自己的出身“违背了秩序”。 他们因为自己无法决定的一些特质而被驱逐，他们没有做错什么，只是“像他们这样的人”不符合其他人的秩序观。另一些人或许也不是因为缺乏意愿而“达不到规范”，而是因为缺乏某些必要的资源——其他人有而他们没有的资源。这些资源供不应求，不可能所有人都充分拥有。 事实证明，（即将）被驱逐的人不适合享有自由。赋予他们自由将导致他们的毁灭。一旦放任他们，可怕的事情就接踵而来，他们将给自己招来各种灾祸。剥夺被驱逐者的行动自由（他们一定会滥用或浪费这种自由）无疑是维护法律和秩序的需要，也最符合被驱逐者的利益。 监视、控制、管理被驱逐者的行为，被认为是一种善行、一种道德义务。这两方面交织在一起，促使人们必须对这些达不到标准的人“做些什么”，这种冲动从秩序的建立和维护中汲取力量，也涉及怜悯和同情等道德情感支持。\n然而，无论它的动力是什么，这种冲动总是化为全力“他律”（heteronomous），剥夺那些不知道如何正确使用自己力量的人的力量，千方百计使他们屈从于他们逃避、反抗的“超越个人的制度”。 自古以来，捍卫秩序和同情，总是在穷人形象的社会构建中相互交融。穷人是指那些吃不饱、穿不暖的人，他们达不到同时代同区域的正常标准，但他们首先是“不符合规范”的人，规范是指达到正常标准的能力。 失去位置的穷人 # 社会对穷人态度的转变 # 迄今所知的每个社会都有穷人。这并不奇怪，让我重复一遍，因为强加任何秩序模式都会造成分裂，并把社会的某个群体定性为不合适、不正常。当某种特定的生存模式被提升到规范的地位，其他的选项就会被降格到低于标准或不正常的范畴。穷人正是这种“不合适”和“不正常”的典型和原型。\n每一个已知的社会都对穷人持一种特有的矛盾态度，一方面是恐惧和反感，另一方面是怜悯和同情。 前者允许在需要秩序维护的时候对穷人进行严厉的处理； 后者强调了那些达不到标准的人的悲惨命运，由此让正常生活的人在遵守社会规范时遭遇的所有艰辛都变得微不足道。 可以看到，以这种间接、迂回的方式，穷人还是能够在社会秩序的再生产和保障社会规范有效运作的努力中发挥有益的作用。 前现代时期 # 在挖掘穷人的价值方面，前现代的欧洲比现代做得更好。 那时的穷人和其他所有人一样都是上帝的子民，是“神圣的存在之链”中不可缺少的一环。作为上帝造物的一部分，他们的存在本身就充满了意义和目的。 穷人确实受苦，但他们的苦难是对原罪的忏悔，是得到救赎的保证。那些更幸运的人可以帮助、救济这些穷人，并在这个过程中获得自己的救赎。 因此，穷人的存在是上帝的礼物：一个实践自我牺牲、施行善举、忏悔罪孽、获得救赎的机会。可以说，一个依靠来世寻求尘世生活的意义的社会，如果没有穷人的存在，就需要另外寻找一种救赎的手段。 现代时期 # 褪去宗教光环的世界里，没有什么可以仅仅因为存在而享有权利，所有事物都必须展示出合法、合理的证据证明自己可以享有权利。\n最重要的是，与前现代的欧洲相比，这个现代性的勇敢新世界有自己的规则，没有什么是理所当然的，它把现存的一切都置于尖锐的理性审视之下，认为没有什么可以限制它的权威。这个世界拒绝“逝者凌驾于生者的力量”，拒绝传统、传承或习俗的权威。秩序和规范取代了神圣的存在之链的构想。 秩序和规范是人类的产物，是有待人们通过行动实施的设计——它们尚未建造完成，并非人们已经找到并安然遵守的东西。如果遗留下来的现实与规划好的秩序格格不入，那现实就是错的。 于是，穷人的存在成为一个问题（“问题”是指引起人们不适的东西，总能引发解决、补救或消除它的冲动）。穷人是秩序的障碍和威胁，也违背了规范。\n穷人是双重危险。 一方面，既然他们的贫穷不再是天意的裁决，那么他们就没有理由谦卑恭顺地接受自己的命运，而是有各种理由抱怨和反抗那些更幸运的人，指责他们造成了自己的贫穷。 另一方面，古老的基督教慈善思想现在看来是一种不可容忍的负担，是无意义的财富消耗。把财富分享给那些得不到命运眷顾的人，曾经是一种对于来世的明智投资，但它“不合情理”，当然也就不符合现世的社会逻辑。 工业化时期 # 很快，穷人又带来第三个危险：那些温顺接受神的旨意不再努力摆脱苦难的穷人，根本不愿从事工厂的工作，一旦他们习惯并视为“天生”的微薄需求得到了满足，就不愿再出卖自己的劳动。 初期的工业社会常常困扰于劳动力短缺，那些甘于现状的穷人是工业时代企业家的噩梦：他们对稳定的工资不感兴趣，一旦有了足以度日的面包，就不愿意继续忍受长时间的苦役。这确实是一个恶性循环：穷人反抗他们遭受的苦难导致叛乱和革命，穷人妥协于他们悲惨的命运遏制和阻碍工业企业的进步。 强迫穷人在工厂长期劳作似乎是解决这种循环的一种有效方法。\n工业时代的穷人被重新定义为劳动力后备军。\n就业，稳定的就业、毋庸置疑的就业成为一种规范，失业与贫困画上等号——这是一种不符合规范的行为、一种不正常的状态。既然如此，为了消除贫困，把繁荣的威胁消灭在萌芽状态，显而易见的方法就是诱导穷人去工厂工作，并在必要时强迫他们接受自己的命运。\n实现这个目标最明显的方法当然是剥夺穷人的所有其他生活来源：接受条件，无论这些条件多么苛刻，无论这些条件多么令深恶痛绝，它们都是最后的救命稻草。 严格地说，在这种“别无选择”的情况下，道德义务的说教是多余的，把穷人带到工厂车间的并非他们的道德冲动。即使如此，人们还是普遍认为工作伦理是一剂良药，甚至不可或缺，可以一石三鸟地解决贫困、劳动力不足和革命的威胁，能够成为撒在苦涩糕点表面的糖霜。 把枯燥无味的工作提升到崇高的道德责任，或许能够让从事这些工作的人甘之如饴，同时也迎合了那些提供工作的人的道德良知。 事实上，当时的中产阶级已经接受了工作伦理，习惯了以工作伦理的角度重新审视自己的生活。由此，选择工作伦理作为工具也就是自然而然的。\n当时的观点分为两派，有些人视穷人为洪水猛兽，另一些人则以道德、良知、同情心为指引。\n然而，在工作伦理这个问题上，他们达成了 完全一致。\n一方面，约翰·洛克（John Locke）制定了一个全面的方案以消除穷人与生俱来的“放纵”和“懒惰”：把穷人的孩子关在贫民学校里培训他们从事正规的工作，把他们的父母关在工棚里严加管教，用微薄的收入、强迫劳动和体罚约束他们。 另一方面，哀叹穷人“悲惨、可怜、不幸、软弱、无用” 的约瑟亚·柴尔德（Josiah Child），也认为“让穷人工作”是“人对上帝和自然的责任”。 消费者社会时期 # 当今社会主要把其成员看作消费者，其次才部分地将其成员看作生产者。想符合社会规范，成为一个合格的社会成员，就需要对消费市场的诱惑作出及时有效的反应，需要为“清空供给”作出贡献，需要在经济环境出现问题时，积极参与“消费者主导的复苏”。\n穷人没有体面的收入，没有信用卡和美好前景，他们达不到要求。今天穷人打破的社会规范——使他们“不正常”的规范，是消费能力规范而非就业规范。 今天的穷人是“不消费的人”，而非“失业者”。他们首先被定义为有缺陷的消费者，因为他们没有履行最重要的社会责任——积极有效地购买市场提供的商品和服务。消费者社会的资产负债表中，穷人明显是负债，无论如何也不能把他们记入现在或未来的资产。 有史以来第一次，穷人成了彻底的麻烦。他们没有任何价值可以缓释或抵消自己的罪恶，也没有任何东西可以回报纳税人的支出。他们是一项糟糕的投资，永远不可能收回成本，更不用说带来收益。他们就像一个黑洞，吸入任何靠近的东西，吐出的只有麻烦。体面、正常的社会成员，那些消费者，他们对穷人没有任何要求，也没有任何期待。穷人是完全没价值的，没有人（真正有身份、有话语权的人）需要他们。对穷人应该零容忍，没有他们的世界会变得更加美好。没有人需要他们，所以他们最好不存在。他们可以被无情地抛弃，没有人会因此懊悔或内疚。\n没有位置，没有道德义务 # 在消费者构成的世界里没有福利国家的空间 # 有观点认为，福利国家是穷人和底层人士来之不易的胜利。\n只是因为穷人还有很多“讨价还价的资本”——他们还有重要的价值，对生产者社会仍有不可取代的作用。 除此之外，福利国家是把劳动力再商品化的手段，使劳动力达到能够售卖的水平，并在劳动力需求重新回升时将其推向交易市场。国家承担了这个重任，因为资本家不愿意也无法负担这种再商品化的成本（无论是单独负担，还是联合起来）。考虑到工业就业的双重（政治上和经济上）作用，福利国家能使闲散的人重新工作，在这个环境中，它是一项明智的、有利可图的投资。 然而，时过境迁，现在它越来越像是一个错误的理念，在无端浪费纳税人的钱。\n由此，福利国家的全面衰退也就不足为奇。只有极少数国家的福利体系还完好无损，或者说去福利国家的进程较为缓慢。\n穷人的苦难不再是问题 # 穷人似乎并不关心自己的困境，即使他们关心，也没有任何实际证据表明他们的愤怒和付诸行动的决心。\n他们的苦难无疑像所有时代穷人遭受的苦难一样，但与他们的父辈不同，他们没有试图把自己的苦难重新变成社会关注的问题，或者这种尝试已经失败。\n穷人从社会交互和交易的网络中被孤立出来，这一系列的排斥造成的结果是，他们失去了基准，前途未卜。\n大规模“放松管制”的时代，政府从规范管理中逐渐撤离，秩序的建设仍在继续（而且速度还在加快），但政治权利所倡导的秩序和规范的整体愿景却不见了。\n社会的每一个单位，无论大小，都在努力（至少是被推动着）把自己的小部门或社会相互依存的复杂网络的一部分塑造成社会希望的模样——这种无处不在的“再造”产生的“人类废弃物”被驱逐到一个无人负责、无人监护的虚空地带。这个新的“无人区”中，被驱逐的人或过剩的人被遗弃在法律和道德义务的领域之外。\n皮埃尔·布尔迪厄（Pierre Bourdieu）指出，为了应对未来的挑战，人们首先需要把握现在，但新穷人显然对此无能为力： 临时雇用制深刻影响了饱受其苦的人，通过把人们的未来变得更不确定，它制止了所有的理性预期，尤其熄灭了人们对未来的基本信念和希望。然而人们需要这种信念和希望来反抗（特别是集体反抗）目前这个最无可容忍的现状。\n这就是为什么现在那些“被驱逐者”没有要求，也没有计划，不重视自己的权利，也不履行自己作为人、作为公民的义务。既然他们在别人眼里如同不存在，逐渐地，他们在自己眼里也不复存在。\n如今，穷人的苦难不再能汇聚成一项共同的事业。每一个有缺陷的消费者都在孤独中舔舐自己的伤口，最多只能与他们尚未破碎的家庭为伴，与同样没有资源的朋友为伴。 有缺陷的消费者是孤独的，感觉自己被抛弃，一旦他们长期处于孤独状态，他们就真的变成了独行者。他们不知道社会能帮上什么忙，也不期望能获得帮助。 “消除”穷人 # 他们不被需要，被社会抛弃。那么，哪里才是他们的归宿？最简短的答案是，消失不见。\n首先，要把穷人从消费者的勇敢新世界赶走，把他们从街道赶走，从公共场所赶走。 为了使物理隔离万无一失，人们还可以用精神隔离加强效果，把穷人从道德同情的世界中彻底驱逐出去。 脱离了社会群体，脱离了公众关注，我们知道接下来会发生什么。人们总会有强烈的冲动，去摆脱那些纯粹的麻烦，就像擦拭美丽风景中的污斑，或是抹去有序世界、正常社会之画布上的污点。\n纳粹的暴行并非因为喜欢暴行，而是因为责任；并非为了施虐，而是为了美德；并非基于快感，而是基于方法；并非肆无忌惮、释放野性的冲动，而是以优秀的价值观为名，以专业的能力持之以恒地完成面前的任务。\n这种暴力是在人们的沉默中实施的。人们自认为是正直的、有道德的，却认为那些暴力的受害者没有理由成为自己同情的对象，因为他们早被踢出了人类大家庭。 用格雷戈里·贝特森（GregoryBateson）的话说，一旦道德共同体的消亡与解决棘手问题的先进技术相结合，“你的生存机会几乎为零”。 解决麻烦的理性方案，辅之以道德上的冷漠，造就一件爆炸性混合物。很多人会死于这场爆炸，而最醒目的牺牲品是躲过这场劫难的幸存者的人性。 我们没有站在那里——尚未站在那里，但凶兆已经显现。我们别把它当作又一个末日预言，在经受检验之前就早早忘却，以免未来不得不一次次反思今天，为没有留意到的征兆而遗憾。幸运的是，人类的历史上到处都是未能成为现实的不祥预言。但是，因为缺少警告或对警告不以为然，历史中也发生了很多最令人发指的罪行。 现在和过去一样，选择权在我们手中。\n工作伦理，还是生活道德 # 这是一篇一遍读一边思考的文章，而不是一篇包含了知识点的文章\n现在，这里有一个选择。尽管人们希望隐匿自己的人类本性，假设选择就像空气一样具有不证自明的必要性，但大多数人仍把当下趋势之外的其他选择视为“不切实际”，甚至“违背事物的本质”。想象另一种共存方式并不是我们这个世界的强项，我们所处的世界是私有化的乌托邦，时时都在计算着得失，危机意识取代了政治愿景。我们这个世界没有能力凝聚必要的意志和决心，去实践一个完全不一样的世界。“不切实际”这种不屑一顾的态度，在当前的政治冲突中比比皆是，正是缺乏意志和决心的真实写照。 科尼利厄斯·卡斯图里亚蒂斯最近指出，西方世界的危机“恰恰在于不再质疑自己”。然而，“质疑自己”正是西方世界追求令人惊讶的、史无前例的自我完善的最深层秘密，也是西方世界成功追求最雄心勃勃目标的最深层秘密。质疑自己是可行的，事实上是必不可少的，因为我们所有的规划都建立于主观之上，并且注定只能是主观的。既然是主观的，它们当然可以被其他规划取代，只要这种替换有足够的说服力。不过，现在情况已经不是这样，我们往往忘记了“把人视作物体或纯粹的机械系统，这种臆想不亚于声称他是一只猫头鹰”。一旦忘记这点，我们就不再追问那些推动社会不断前进的问题。比如：“一切都以有效性优先，但对谁有效？基于什么？目的是什么？经济增长是实现了，但这是什么的增长？为谁而增长？付出了什么代价？达到了什么目的？” 如果不提出这样的问题，就无法阻碍我们把臆造出的、持续不断的、更愿意看到的、无限制的合理化（导致人被“为了主观目的而主观选取的部分特征的集合”替代）抬升到客观必然的高度，就无法阻碍把所有的怀疑都归为“诗人和小说家等不切实际的人”特有的无病呻吟。 克劳斯·奥菲最近提出一个合乎逻辑又有生命力的主张，意在彻底解决目前的危机。这个解决方案的核心是“个人收入权利和实际收入能力脱钩”的构想。这是可以实现的，只需要改变一个视角，即从工作伦理决定的以雇佣劳动为中心，转变为人的地位和尊严决定的以基本权利、基本保障为中心。通过以税收为社会保障提供资金且废除经济审查和工作意愿评估的原则，通过逐步以需求原则取代等价原则，通过个人作为权利基础的原则，这种构想就能够切实推进。按照这些原则对社会保障制度进行改造，就有可能把自由、平等、公正的福利国家价值观延续到资本主义福利国家目前所处的发展阶段（在这个阶段，充分就业的目标早已退出理想和现实的视野）。 奥菲的建议似乎很模糊，因为正如之前所说，我们越来越失去了对世界质疑的能力。当所有依靠选举的政治力量都在奔向相反的方向，把疾病的症状看作康复的迹象，把疾病的原因看作良药，这些建议不可能引起任何关注。出于政治私利和选举收益，似乎所有重量级的、有组织的政党都倾向于忽略奥菲的观点。不过，如果被公开追问，“负责任的政治家”很可能会以预算难以负担或政治、经济上“不现实”为由，否定实施基本保障的可能性，从而掩盖应该被质疑的现实主义：当下流行的危机管理权宜之计。 然而，正如奥菲自己所说，他的建议归根结底是保守的。它们建议的不是革命，而是在既有体制无法继续贯彻西方文明道德价值和社会安排的情况下，保存这些道德价值和社会安排。正因为这些建议的保守用意，举证的责任落在了反对者的身上。要么他们终结战后的社会道德共识，要么他们必须表明，从长远来看，他们的诉求可以通过基本收入之外的手段得到满足——这并不现实。 奥菲似乎低估了反对者的抵抗力，他忽视了消费者社会提供给反对者的一种现实可能性：不顾一切“终结道德和社会共识”。奥菲提出的诘问是一个真正的现实困境。无论作出正确选择的机会有多大，这个选择都像奥菲描述的那样真实存在。通过否认存在选择以拒绝认真考量，将造成不可估量的社会和道德后果。 无论奥菲的假设多么激进，仍然需要补充另一个假设：工作和劳动力市场的去耦。梅丽莎·本恩（Melissa Benn）最近指出：“当男性政治家谈论工作时，他们所指的总是有偿工作。”这并不完全正确，因为不论男性，还是女性政治家，他们在谈论工作时想到的都是“有偿工作”。即使存在女性参与者，政治大体上仍然是男人的事业。真实情况是，把工作等同于有偿工作在历史上是男人的成就。马克斯·韦伯早就指出，他们把自己的事业从家庭中分离出来。在这种情况下，他们让女人去从事其他所有必须的生活家务。由于这些工作看不到经济收益，所以就不再被看作是工作。 以这种形式，工作的观念进入政治，在那里成为男性独占的竞技场——工会权利和劳动立法的竞技场——当中的竞技对象。这样一来，“工作”就仅等价于商业活动领域的工作，即那些可以买卖，具有公认的市场价值，可以获得报酬的工作。所有工作领域之外的事都扔给了女性。当人们谈论工作时，不会想到家务或抚养孩子，这两者明显属于女性领域；更普遍的是，人们也不会意识到那些日常生活中消耗的大量社会技能和花费的无数时间，即A. H.哈尔西（A. H. Halsey）和迈克尔·杨（Michael Young）所说的“道德经济”。这种无人质疑的歧视和工作伦理同流合污，认为劳动力市场之外不以交易为目的的劳动，都意味着失业，等同于没有工作。颇为讽刺的是，只有高级政客才能在退隐后公开宣布，他们准备享受时光，“花更多时间陪伴家人”。 在很多方面，后果都是灾难性的。它们极大地推动了社区和邻里关系的无情瓦解，毕竟“社会凝聚力”的维系需要消耗大量的时间、付出大量的努力。总体来说，这对家庭结构和家庭活力造成了深远的伤害。它们严重侵蚀了人际关系网络和人与人之间道德联系扎根的土壤。总而言之，它们已经且持续对生活质量（较难与“生活水平”区分开来，但它们是完全不同的概念）造成了很大的损害。这种损害是任何市场的商品、任何消费能力的增长和任何心理咨询都无法弥合的。 为了把工作从以市场为中心的计算和限制中解放出来，就必须以工艺伦理（ethics of workmanship）取代劳动力市场发展过程中形成的工作伦理。索尔斯坦·凡勃伦（Thorstein Veblen）早就指明，“工艺本能”（instinct of workmanship）有别于工作伦理这个现代发明，是人类的自然倾向。人是具有创造力的生物。如果认为标价牌是区分工作与非工作、努力与懒惰的标准，那是对人类本性的贬低；如果认为没有收益，人们宁愿闲着，让自己的技能和想象力腐烂生锈，那是对人类本性的肢解。工艺伦理将恢复人类本能的尊严，恢复社会公认的意义。现代资本主义社会形成且根深蒂固的工作伦理却否认了这种尊严和意义。我们不是第一次站在历史的十字路口，需要选择走向何方。首先，至关重要但并不那么显而易见的是，需要认识到我们身处十字路口，认识到有多个选择都可以通向未来，认识到前行的路上或许随时需要紧急转换方向。 人们很容易对“收入权利与收入能力脱钩，工作与劳动力市场脱钩”这个想法不以为然，认为这是被蔑称为“乌托邦坟场”的历史中的又一个乌托邦。我们的时代是“个体乌托邦”的时代，是私有化乌托邦的时代，因此，人们自然而然地（流行地）嘲笑和讥讽这种构想，因为它们只是“集体任凭个人使用”理念的小小修订。 因此，奥夫的观点引出的思想，在严肃又现实的学者看来或许不值得思考。他们这样做有充分的理由。正如罗歇-波尔·德鲁瓦（Roger-PolDroit）最近说的，“现实如同鸡蛋一般饱满，让人几乎无法摆脱它的约束。我们相信它们是永恒的，直到它们被历史抹去”。他接着指出，在伯里克利的希腊或恺撒的罗马，没有奴隶的世界是不可想象的，在波舒哀（Bossuet）的时代，非君主制的世界也是不可想象的。因此，我们怎么能肯定，不被市场奴役的经济是不现实的？不平等的加剧是无法阻止的？德鲁瓦的结论是：“我们的时代并未阻止乌托邦的脚步，反而为其回归做好了准备。我们越是复述政治没有梦想的空间，就越是渴望一个完全不同的世界。”保罗·利科（Paul Ricoeur）肯定会同意：正是他在十年前提出，在我们这个被看似无形的体系阻隔的时代，乌托邦成为我们对抗封闭的主要武器。最近，费尔南多·艾因萨（Fernando Ainsa）在完成关于拉丁美洲历史的研究后建议，与其说“乌托邦”，一个根本不存在的地方，不如说“泛托邦”（pan-topia），无处不在之地。 收入权利与收入能力脱钩的想法其实并不保守。根据我们的推论，实现它恰恰需要一个非常大的转变。我们将不得不放弃目前生活模式中一些神圣不可侵犯的假设（由于缺少反思，它们显得更加神圣）。例如，效率是一件好事，无论它目的何在，也无论它是否会带来痛苦的副作用。再例如，凡是“经济增长”的东西，即统计意义上“今天比昨天多，明天比今天多”的东西，就是好的，而无视其增长过程中对人类生存环境和自然（全人类共享的生存环境）造成的损害。 对那些因为需要作出巨大的转变而反对的人，我们只能再次引用科尼利厄斯的话来回答。当一个采访者问他：“那么，你想要什么？改变人类吗？”，卡斯托利亚蒂斯回答说：“不，没有那么夸张：我希望人类改变，正像他们已经改变过两三次那样。” 至少现在还有希望，人类能够再次完成同样的壮举。毕竟，正如帕特里克·库里（Patrick Curry）所言，“群体自愿的返璞归真，正成为群体贫困的唯一有意义的替代。” ","date":"27 March 2024","externalUrl":null,"permalink":"/posts/book/%E5%B7%A5%E4%BD%9C%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89%E5%92%8C%E6%96%B0%E7%A9%B7%E4%BA%BA/","section":"Posts","summary":"\u003cp\u003e\u003cstrong\u003e《工作、消费主义和新穷人》\u003c/strong\u003e\n挺有意思的一本书，当年高考结束后没事干就读了一次，那时候玩疯了，没读进去\n之前莫名又得到了猪先生的推荐，才发现这本书还被带到学校来了\n以我的能力实在是写不出什么有意义的东西，直接重读又显得很空洞，所以就想着做个笔记吧\n其实说是笔记，基本上都是摘抄，又太久没有写字，就准备打字做\n有一些结构性的组织，但基本还是照着原文来的，虽然都是抄，但也是自己一个字一个字打的\n回过头来看确实有效果，至少脑子里印象深了很多\u003c/p\u003e","title":"《工作、消费主义和新穷人》","type":"posts"},{"content":"","date":"27 March 2024","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"27 March 2024","externalUrl":null,"permalink":"/tags/note/","section":"Tags","summary":"","title":"Note","type":"tags"},{"content":" 为什么使用WSL # 为什么用WSL # 在可能的选项中\n一是给电脑装双系统，利用网络进行文件传输 且不谈电脑双系统可能导致的各种问题，光是配置双系统要修改的各种安全选项就已经很难接受了 双系统不支持两个系统同时运行，无法完整地发挥二者的优势 Ubuntu或者其他Linux发行版本身就是个坑，不是专业的人就不去干专业的活，有基本环境就行 二是使用一个U盘安装Linux系统 U盘发热，IO缓慢 无法同时运行 开机不处理还要狂按F2 三是使用VMware 主要还是太笨重了 可以有GUI很吸引人，但是现在WSL2也可以有GUI了 最终还是WSL最符合当下的需求：\n只是创建一个轻量的环境 简单方便的文件传输和画面获取 支持VScode这样的IDE 本次搭建目标 # 网络代理实现 # 实现Clash的本地跨平台代理（心头大患） 基本编译环境构建 # C/C++的编译器和VScode配置 python相关（解释器、pwndbg等） 图形化界面实现 # 可有可无，有就是好 包管理和文件管理系统 # 解决一下apt的问题，太混乱了，利用图形化界面 解决文件管理问题，不要总是让我chmod了 ","date":"27 March 2024","externalUrl":null,"permalink":"/posts/tech/wsl/wsl-00-why/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e为什么使用WSL \n    \u003cdiv id=\"为什么使用wsl\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8wsl\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003e为什么用WSL \n    \u003cdiv id=\"为什么用wsl\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%ba%e4%bb%80%e4%b9%88%e7%94%a8wsl\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e在可能的选项中\u003c/p\u003e","title":"WHY WSL?","type":"posts"},{"content":"","date":"25 March 2024","externalUrl":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian","type":"tags"},{"content":" 网站资源问题 # 非常值得庆幸的是目前网站所有资源都在本地有备份，图床也是自己的，还在阿里云有个私人备份，但是由于链接的网址问题，后续如果换了域名就得全局修改，不过vscode有全局替换功能，就是不知道会不会出什么幺蛾子，目前来说网站的资源还是比较稳定的，至少本地都有留档\n文章管理问题 # 博客的维护问题根本上还是在于有没有意愿去写，如果写着不舒服就很难维持更新\n考虑到自己已经长期使用obsidian做笔记管理，所以就去看了看有没有相关先辈，学了点东西\n目前的工作流细节大概是：\n在网站框架根目录套一个obsidian的壳，让obsidian可以管理整个根目录 使用Hide folders插件隐藏掉没用的文件或文件夹 使用image auto upload插件实现与picgo的联动，全自动上传和粘贴链接 使用obsidian自带的模板功能实现front-matters的载入 使用obsidian git插件将框架整个上传到github上 待选：\n使用GitHub Actions自动部署 问题是还是要自行绑定域名，而且部署速度很慢，容易出bug 由于hexo可以随时重新生成网页，所以文章的修改啥的还是很方便的\n","date":"25 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-07-%E7%BD%91%E7%AB%99%E7%BB%B4%E6%8A%A4/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e网站资源问题 \n    \u003cdiv id=\"网站资源问题\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e7%bd%91%e7%ab%99%e8%b5%84%e6%ba%90%e9%97%ae%e9%a2%98\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e非常值得庆幸的是目前网站所有资源都在本地有备份，图床也是自己的，还在阿里云有个私人备份，但是由于链接的网址问题，后续如果换了域名就得全局修改，不过vscode有全局替换功能，就是不知道会不会出什么幺蛾子，目前来说网站的资源还是比较稳定的，至少本地都有留档\u003c/p\u003e","title":"web-07 网站维护","type":"posts"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/cloudflare/","section":"Tags","summary":"","title":"Cloudflare","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/picbed/","section":"Tags","summary":"","title":"Picbed","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/twikoo/","section":"Tags","summary":"","title":"Twikoo","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/vercel/","section":"Tags","summary":"","title":"Vercel","type":"tags"},{"content":" 开启cloudflare # 打开cloudflare官网，照着提示做，把自己的域名交给cloudflare管理即可，选免费计划\n这里比较技术性的就只有修改自己域名的namesevers，这个得看你在哪买的域名\n总之cloudflare会为你提供两个namesever\n之后去域名管理那里改掉namesever即可，注意只能保留这两个，其他全删掉\n稍等一段时间就能看到自己的域名已经在cloudflare上有效了\n后续你的域名就可以在cloudflare上管理了，只有续费需要回到购买域名的地方\n写在前面 # 记得把之前的域名都改成新设的自定义域名，不然会有未知错误\n虽然访问原域名大部分时候也会重定向到新域名\ngithub pages配置 # 去到dns设置，一般来说cloudflare可以检测到大部分过去的dns选项，如果没有就再设置一次\ngithub一共五个dns配置\n四个A类型的，指向github的185.199系列ip\n一个cname类型的，指向过去分配的github pages 地址\n去到github项目配置，选settings，进入pages页，在最下面添加自己的域名即可\ngithub会自动进行dns检测，如果上一步没问题应该可以显示dns配置正常\n然后可以打开强制https，GitHub会帮你到Let\u0026rsquo;s Encrypt申请一个SSL证书，这样与你的网站的连接就都是加密的，浏览器也不会显示危险网页了\n虽然github会自动为你的repo添加一个cname文件，使得你不用自行操作，但是每次部署都要来设置一次自定义域名\ntwikoo配置 # 没什么难度，dns配置见上图，就两个\n一个是A类型的指向vercel的国内专供ip76.223.126.88 一个是cname指向vercel的国内专供dns地址`cname-china.vercel-dns.com 然后到vercel上给项目绑定个新域名，dns检查通过就行，vercel上只用绑定一次\n记得改一下配置文件的envId\npicbed配置 # picbed用cloudflare有点技术活，需要使用cloudflare提供的worker\n登录到 Cloudflare 的管理界面后，点击侧边栏的 “Workers” 选项，然后点击 “创建服务” 创建一个 Worker，现在似乎会提供一个helloworld的例子，无所谓，直接选helloworld修改也行 如果是直接创建记得选http处理程序服务\n给worker取个名字，部署，然后进入修改代码\n将下面的代码复制粘贴到编辑页面的代码编辑器中\n注意修改两个路径，一个是代理路径，一个是token，注释里有写 /** * Welcome to Cloudflare Workers! This is your first worker. * * - Run \u0026#34;npm run dev\u0026#34; in your terminal to start a development server * - Open a browser tab at http://localhost:8787/ to see your worker in action * - Run \u0026#34;npm run deploy\u0026#34; to publish your worker * * Learn more at https://developers.cloudflare.com/workers/ */ // Website you intended to retrieve for users. const upstream = \u0026#34;raw.githubusercontent.com\u0026#34;; // Custom pathname for the upstream website. // (1) 填写代理的路径，格式为 /\u0026lt;用户\u0026gt;/\u0026lt;仓库名\u0026gt;/\u0026lt;分支\u0026gt; const upstream_path = \u0026#34;/GodKeawa/picbed/main\u0026#34;; // github personal access token. // (2) 填写github令牌 const github_token = \u0026#34;\u0026lt;your token\u0026gt;\u0026#34;; // Website you intended to retrieve for users using mobile devices. const upstream_mobile = upstream; // Countries and regions where you wish to suspend your service. const blocked_region = []; // IP addresses which you wish to block from using your service. const blocked_ip_address = [\u0026#34;0.0.0.0\u0026#34;, \u0026#34;127.0.0.1\u0026#34;]; // Whether to use HTTPS protocol for upstream address. const https = true; // Whether to disable cache. const disable_cache = false; // Replace texts. const replace_dict = { $upstream: \u0026#34;$custom_domain\u0026#34;, }; addEventListener(\u0026#34;fetch\u0026#34;, (event) =\u0026gt; { event.respondWith(fetchAndApply(event.request)); }); async function fetchAndApply(request) { const region = request.headers.get(\u0026#34;cf-ipcountry\u0026#34;)?.toUpperCase(); const ip_address = request.headers.get(\u0026#34;cf-connecting-ip\u0026#34;); const user_agent = request.headers.get(\u0026#34;user-agent\u0026#34;); let response = null; let url = new URL(request.url); let url_hostname = url.hostname; if (https == true) { url.protocol = \u0026#34;https:\u0026#34;; } else { url.protocol = \u0026#34;http:\u0026#34;; } if (await device_status(user_agent)) { var upstream_domain = upstream; } else { var upstream_domain = upstream_mobile; } url.host = upstream_domain; if (url.pathname == \u0026#34;/\u0026#34;) { url.pathname = upstream_path; } else { url.pathname = upstream_path + url.pathname; } if (blocked_region.includes(region)) { response = new Response( \u0026#34;Access denied: WorkersProxy is not available in your region yet.\u0026#34;, { status: 403, } ); } else if (blocked_ip_address.includes(ip_address)) { response = new Response( \u0026#34;Access denied: Your IP address is blocked by WorkersProxy.\u0026#34;, { status: 403, } ); } else { let method = request.method; let request_headers = request.headers; let new_request_headers = new Headers(request_headers); new_request_headers.set(\u0026#34;Host\u0026#34;, upstream_domain); new_request_headers.set(\u0026#34;Referer\u0026#34;, url.protocol + \u0026#34;//\u0026#34; + url_hostname); new_request_headers.set(\u0026#34;Authorization\u0026#34;, \u0026#34;token \u0026#34; + github_token); let original_response = await fetch(url.href, { method: method, headers: new_request_headers, body: request.body, }); let connection_upgrade = new_request_headers.get(\u0026#34;Upgrade\u0026#34;); if (connection_upgrade \u0026amp;\u0026amp; connection_upgrade.toLowerCase() == \u0026#34;websocket\u0026#34;) { return original_response; } let original_response_clone = original_response.clone(); let original_text = null; let response_headers = original_response.headers; let new_response_headers = new Headers(response_headers); let status = original_response.status; if (disable_cache) { new_response_headers.set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;no-store\u0026#34;); } else { new_response_headers.set(\u0026#34;Cache-Control\u0026#34;, \u0026#34;max-age=43200000\u0026#34;); } new_response_headers.set(\u0026#34;access-control-allow-origin\u0026#34;, \u0026#34;*\u0026#34;); new_response_headers.set(\u0026#34;access-control-allow-credentials\u0026#34;, \u0026#34;true\u0026#34;); new_response_headers.delete(\u0026#34;content-security-policy\u0026#34;); new_response_headers.delete(\u0026#34;content-security-policy-report-only\u0026#34;); new_response_headers.delete(\u0026#34;clear-site-data\u0026#34;); if (new_response_headers.get(\u0026#34;x-pjax-url\u0026#34;)) { new_response_headers.set( \u0026#34;x-pjax-url\u0026#34;, response_headers .get(\u0026#34;x-pjax-url\u0026#34;) .replace(\u0026#34;//\u0026#34; + upstream_domain, \u0026#34;//\u0026#34; + url_hostname) ); } const content_type = new_response_headers.get(\u0026#34;content-type\u0026#34;); if ( content_type != null \u0026amp;\u0026amp; content_type.includes(\u0026#34;text/html\u0026#34;) \u0026amp;\u0026amp; content_type.includes(\u0026#34;UTF-8\u0026#34;) ) { original_text = await replace_response_text( original_response_clone, upstream_domain, url_hostname ); } else { original_text = original_response_clone.body; } response = new Response(original_text, { status, headers: new_response_headers, }); } return response; } async function replace_response_text(response, upstream_domain, host_name) { let text = await response.text(); var i, j; for (i in replace_dict) { j = replace_dict[i]; if (i == \u0026#34;$upstream\u0026#34;) { i = upstream_domain; } else if (i == \u0026#34;$custom_domain\u0026#34;) { i = host_name; } if (j == \u0026#34;$upstream\u0026#34;) { j = upstream_domain; } else if (j == \u0026#34;$custom_domain\u0026#34;) { j = host_name; } let re = new RegExp(i, \u0026#34;g\u0026#34;); text = text.replace(re, j); } return text; } async function device_status(user_agent_info) { var agents = [ \u0026#34;Android\u0026#34;, \u0026#34;iPhone\u0026#34;, \u0026#34;SymbianOS\u0026#34;, \u0026#34;Windows Phone\u0026#34;, \u0026#34;iPad\u0026#34;, \u0026#34;iPod\u0026#34;, ]; var flag = true; for (var v = 0; v \u0026lt; agents.length; v++) { if (user_agent_info.indexOf(agents[v]) \u0026gt; 0) { flag = false; break; } } return flag; } 保存后部署运行 cloudflare worker一天的免费请求额度是100000，也就是说支持一天提供一共100000次的图片加载或上传，可以说是太够用了\n最后给worker一个自定义域名\n在 Worker 服务的详情页点击“触发器”，然后点击“添加自定义域”。 输入想要绑定的域名后，点击“添加自定义域”。 cloudflare会自动为你添加一个dns解析，可以说是十分的防傻了 cloudflare还会为你的图床域名提供SSL，生成需要一段时间，等待生成变为有效状态，到这里，Cloudflare的配置就完成了 现在去picgo上配置一下自定义域，以后就不用开代理上传了，国内网络也可以直接访问到图片了，不过steam++的加速会导致SSL证书错误，这好像是steam++加速的问题，不开就行 ","date":"23 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-06-%E5%9B%BD%E5%86%85%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e开启cloudflare \n    \u003cdiv id=\"开启cloudflare\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%bc%80%e5%90%afcloudflare\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e打开cloudflare官网，照着提示做，把自己的域名交给cloudflare管理即可，选免费计划\u003cbr\u003e\n这里比较技术性的就只有修改自己域名的namesevers，这个得看你在哪买的域名\u003cbr\u003e\n总之cloudflare会为你提供两个namesever\u003c/p\u003e","title":"web-06 国内网络加速","type":"posts"},{"content":" 图床搭建 # 登录你的 Github 之后，创建一个新的仓库 填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 public 其他的保持默认就好 一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了； 上传图片 # 通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 PicGo 来作为我们的图片上传工具；\nPicGo 的安装就不说了，去他的 官网 下载对应版本进行安装即可，我们主要讲讲如何用它来上传图片。安装后，打开软件其主页面如下：\n接下来就是配置 PicGo 的过程了。\n首先，我们先要去 Github 创建一个 token； 以此打开 Settings -\u0026gt; Developer settings -\u0026gt; Personal access tokens -\u0026gt; token(classic)，最后点击 generate new token；\n填写目的，记得勾选repo选项让token有权访问和修改仓库，然后点击 Genetate token 即可；\ntoken 生成，注意它只会显示一次，所以你最好把它复制下来到你的备忘录存好，方便下次使用，否则下次有需要重新新建； 配置 PicGo，依次打开 图床设置 -\u0026gt; Github 图床；\n填写相关信息，最后点击 确定即可，要将其作为默认图床的话，点击设为默认图床； 这里最好还是选择一个文件夹专门存放图片，或者也可以通过修改指定的存储路径实现分类存储 上传图片，通过上传区上传即可（Ctrl V 或者将图片拖拽都可以），也可以通过快捷键的方式 由于网络问题可能需要打开代理来上传，但是部分代理不提供安全的协议，会被拒绝访问\n后续维护 # 由于一些原因图床不能通过前端简单的删除图片，所以很容易产生大量冗余 而GitHub在仓库大小达到1G时就有可能会进行人工审查，对账号安全有威胁 所以最好定时用GitHub desktop克隆下来，维护后再强制push上去 等大小差不多了就重开一个repo，反正可以无限开\n","date":"22 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-05-%E8%87%AA%E5%BB%BA%E5%9B%BE%E5%BA%8A/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e图床搭建 \n    \u003cdiv id=\"图床搭建\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%9b%be%e5%ba%8a%e6%90%ad%e5%bb%ba\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e登录你的 Github 之后，创建一个新的仓库\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"https://pic3.zhimg.com/80/v2-bdae2009a14221c498dbde14714f951e_1440w.webp\" /\u003e\n\n  \n\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e填写仓库先关资料，一般只需要选一个合适的仓库名，然后确保仓库为 \u003ccode\u003epublic\u003c/code\u003e 其他的保持默认就好\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"https://pic4.zhimg.com/80/v2-79c5e7f0d53bf92b27ade85b244aadcf_1440w.webp\" /\u003e\n\n  \n\u003c/figure\u003e\n\u003c/li\u003e\n\u003cli\u003e一般创建成功之后，会出现如下界面，至此，我们的图床算是创建好了，接下来就是如何上传图片了；\n\n\n\n\n\n\n\u003cfigure\u003e\n    \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" alt=\"\" src=\"https://pic3.zhimg.com/80/v2-569e9028620c1d14a8e92dc58647b506_1440w.webp\" /\u003e\n\n  \n\u003c/figure\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 class=\"relative group\"\u003e上传图片 \n    \u003cdiv id=\"上传图片\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e4%b8%8a%e4%bc%a0%e5%9b%be%e7%89%87\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e通过上面的步骤，我们的图床时搭建好了，但是通过传统的方法向 Github 上传图片太麻烦了，这里我们推荐使用一个开源图床工具 \u003ca href=\"https://link.zhihu.com/?target=https%3A//molunerfinn.com/PicGo/\" target=\"_blank\"\u003ePicGo\u003c/a\u003e 来作为我们的图片上传工具；\u003c/p\u003e","title":"web-05 自建图床","type":"posts"},{"content":"","date":"20 March 2024","externalUrl":null,"permalink":"/tags/gmail/","section":"Tags","summary":"","title":"Gmail","type":"tags"},{"content":"","date":"20 March 2024","externalUrl":null,"permalink":"/tags/hexo/","section":"Tags","summary":"","title":"Hexo","type":"tags"},{"content":"","date":"20 March 2024","externalUrl":null,"permalink":"/tags/mongodb/","section":"Tags","summary":"","title":"Mongodb","type":"tags"},{"content":" 评论区部署 # butterfly主题内置了很多评论系统，甚至可以同时部署两个评论系统 这里因为twikoo可以部署到vercel上，所以我就直接部署twikoo了\n先到_config.butterfly.yml里启用评论系统 comments: # Up to two comments system, the first will be shown as default # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk use: # Valine,Disqus - Twikoo text: true # Display the comment name next to the button # lazyload: The comment system will be load when comment element enters the browser\u0026#39;s viewport. # If you set it to true, the comment count will be invalid lazyload: true count: true # Display comment count in post\u0026#39;s top_img card_post_count: true # Display comment count in Home Page # Twikoo # https://github.com/imaegoo/twikoo twikoo: js: https://gcore.jsdelivr.net/npm/twikoo@1.6.32/dist/twikoo.all.min.js envId: https://twikoo.godke.blog region: visitor: false # 開啟 visitor 後，文章頁的訪問人數將改為 Twikoo 提供，而不是 不蒜子 option: 这里指定js版本要等评论系统部署到vercel以后同步后端版本，如果版本不同后台会提示 envId是部署的域名，vercel部署的默认域名是*.vercel.app,但是这个被墙了，需要后续处理 2. vercel部署 1. 申请 MongoDB 账号 2. 创建免费 MongoDB 数据库，区域推荐选择 AWS / N. Virginia (us-east-1) 3. 在 Database Access 页面点击 Add New Database User 创建数据库用户，Authentication Method 选 Password，在 Password Authentication 下设置数据库用户名和密码，用户名和密码可包含数字和大小写字母，请勿包含特殊符号。点击 Database User Privileges 下方的 Add Built In Role，Select Role 选择 Atlas Admin，最后点击 Add User\n4. 在 Network Access 页面点击 Add IP Address，Access List Entry 输入 0.0.0.0/0（允许所有 IP 地址的连接），点击 Confirm\n在 Database 页面点击 Connect，连接方式选择 Drivers，并记录数据库连接字符串，请将连接字符串中的 \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; 修改为刚刚创建的数据库 用户名:密码 申请 Vercel 账号 点击以下按钮将 Twikoo 一键部署到 Vercel 进入 Settings - Environment Variables，添加环境变量 MONGODB_URI，值为前面记录的数据库连接字符串 进入 Settings - Deployment Protection，设置 Vercel Authentication 为 Disabled，并 Save 进入 Deployments , 然后在任意一项后面点击更多（三个点） , 然后点击 Redeploy , 最后点击下面的 Redeploy 进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示 Vercel Domains（包含 https:// 前缀，例如 https://xxx.vercel.app）即为您的envId 前端配置 # 现在重启项目，应该就能看到评论区被加载出来了，在输入框下面可以看到一个小齿轮 点击小齿轮进入后台，这时最好开一下代理，因为现在使用的是vercel的静态服务，而vercel被墙了\n设置一个后台密码 配置一些通用设置，按照提示来就行，也可以开启插件里的图片功能，需要一个图床的token 评论输入提醒 # 只需在custom.css内添加\n/* 设置文字内容 :nth-child(1)的作用是选择第几个 */ .el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before { content: \u0026#39;输入QQ号会自动获取昵称和头像🐧\u0026#39;; } .el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before { content: \u0026#39;收到回复将会发送到您的邮箱📧\u0026#39;; } .el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before { content: \u0026#39;可以通过昵称访问您的网站🔗\u0026#39;; } /* 当用户点击输入框时显示 */ .el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before, .el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after { display: block; } /* 主内容区 */ .el-input.el-input--small.el-input-group.el-input-group--prepend::before { /* 先隐藏起来 */ display: none; /* 绝对定位 */ position: absolute; /* 向上移动60像素 */ top: -60px; /* 文字强制不换行，防止left:50%导致的文字换行 */ white-space: nowrap; /* 圆角 */ border-radius: 10px; /* 距离左边50% */ left: 50%; /* 然后再向左边挪动自身的一半，即可实现居中 */ transform: translate(-50%); /* 填充 */ padding: 14px 18px; background: #444; color: #fff; } /* 小角标 */ .el-input.el-input--small.el-input-group.el-input-group--prepend::after { display: none; content: \u0026#39;\u0026#39;; position: absolute; /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。 我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */ border: 12px solid transparent; border-top-color: #444; left: 50%; transform: translate(-50%, -48px); } 邮件回复部署 # 邮件回复虽然支持的邮箱很多，但是问题也很多，比如QQ邮箱会认为你在发垃圾邮件，返回一个550报错，完全用不了 最好使用gmail，容忍度比较高\n开通smtp # 谷歌Gmail邮箱开启SMTP/IMAP服务流程\n谷歌邮箱机制是IMAP一旦开通，SMTP也就自动开通了，设置里没有没关系，不用管它\n获取谷歌应用专用密码：\n在开通了IMAP服务，还需要向谷歌获取应用密码才可以使用，此时我们访问谷歌账号页面：https://myaccount.google.com/ 在左侧的菜单下，选择安全性\n注意！我们要获取应用专用密码就必须要开启两步验证，否则应用专用密码的选项不会显示出来。\n按照google的要求开通两步验证即可，过程中需要绑定个手机号\n开通了之后，点击两步验证的选项，应用专用密码功能出现了，我们需要在此出新生成个密码\n生成后会得到一段独立密码，复制保存好，如果忘记就只能删除 重新生成。\n配置邮件回复 # 协议端口说明： 以下是谷歌Gmail邮箱所对应的端口 以及 我们需要的SMTP服务器地址。参考下表：\n介绍 详细 接收邮件 (IMAP) 服务器 imap.gmail.com要求 SSL：是端口：993 发送邮件 (SMTP) 服务器 smtp.gmail.com要求 SSL：是要求 TLS：是（如适用）使用身份验证：是SSL 端口：465TLS/STARTTLS 端口：587 完整名称或显示名称 您的姓名 帐号名、用户名或电子邮件地址 您的完整电子邮件地址 密码 您的 Gmail 密码/应用专用密码 之后来到评论系统后台，选择邮件通知选项，按照提示填入即可 设置自定义回复模板 # 有两个模板，不过我喜欢直接两个用一样的，一个是提醒站长，一个是提醒其他人 提示信息看字符串改就行，匹配字段支持 ${SITE_URL}, ${SITE_NAME}, ${PARENT_NICK}, ${PARENT_COMMENT}, ${NICK}, ${COMMENT}, ${POST_URL}, ${IMG}, ${PARENT_IMG}\n另外可以自定义的也就最前面的background和background-image了，一个是整体的颜色，格式是rgba，一个是头图，改成自己的url就行\n\u0026lt;div class=\u0026#34;page flex-col\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;box_3 flex-col\u0026#34; style=\u0026#34; display: flex; position: relative; width: 100%; height: 206px; background: #aaeeffbb; top: 0; left: 0; justify-content: center;\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;section_1 flex-col\u0026#34; style=\u0026#34; background-image: url(\u0026amp;quot;https://picbed.godke.blog/img/ATRIhead.jpg\u0026amp;quot;); position: absolute; width: 152px; height: 152px; display: flex; top: 130px; background-size: cover;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;box_4 flex-col\u0026#34; style=\u0026#34; margin-top: 92px; display: flex; flex-direction: column; align-items: center;\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;text-group_5 flex-col justify-between\u0026#34; style=\u0026#34; display: flex; flex-direction: column; align-items: center; margin: 0 20px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;text_1\u0026#34; style=\u0026#34; font-size: 26px; font-family: PingFang-SC-Bold, PingFang-SC; font-weight: bold; color: #000000; line-height: 37px; text-align: center;\u0026#34;\u0026gt;嘿！你在\u0026amp;nbsp;${SITE_NAME}\u0026amp;nbsp;中收到一条新回复。\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;text_2\u0026#34; style=\u0026#34; font-size: 16px; font-family: PingFang-SC-Bold, PingFang-SC; font-weight: bold; color: #00000030; line-height: 22px; margin-top: 21px; text-align: center;\u0026#34;\u0026gt;你之前的评论\u0026amp;nbsp;在\u0026amp;nbsp;${SITE_NAME} 中收到来自\u0026amp;nbsp;${NICK}\u0026amp;nbsp;的回复\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;box_2 flex-row\u0026#34; style=\u0026#34; margin: 0 20px; min-height: 128px; background: #F7F7F7; border-radius: 12px; margin-top: 34px; display: flex; flex-direction: column; align-items: flex-start; padding: 32px 16px; width: calc(100% - 40px);\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;text-wrapper_4 flex-col justify-between\u0026#34; style=\u0026#34; display: flex; flex-direction: column; margin-left: 30px; margin-bottom: 16px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;text_3\u0026#34; style=\u0026#34; height: 22px; font-size: 16px; font-family: PingFang-SC-Bold, PingFang-SC; font-weight: bold; color: #C5343E; line-height: 22px;\u0026#34;\u0026gt;${PARENT_NICK}\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;text_4\u0026#34; style=\u0026#34; margin-top: 6px; margin-right: 22px; font-size: 16px; font-family: PingFangSC-Regular, PingFang SC; font-weight: 400; color: #000000; line-height: 22px;\u0026#34;\u0026gt;${PARENT_COMMENT}\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;hr style=\u0026#34; display: flex; position: relative; border: 1px dashed #ef859d2e; box-sizing: content-box; height: 0px; overflow: visible; width: 100%;\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;text-wrapper_4 flex-col justify-between\u0026#34; style=\u0026#34; display: flex; flex-direction: column; margin-left: 30px;\u0026#34;\u0026gt;\u0026lt;hr\u0026gt;\u0026lt;span class=\u0026#34;text_3\u0026#34; style=\u0026#34; height: 22px; font-size: 16px; font-family: PingFang-SC-Bold, PingFang-SC; font-weight: bold; color: #C5343E; line-height: 22px;\u0026#34;\u0026gt;${NICK}\u0026lt;/span\u0026gt;\u0026lt;span class=\u0026#34;text_4\u0026#34; style=\u0026#34; margin-top: 6px; margin-right: 22px; font-size: 16px; font-family: PingFangSC-Regular, PingFang SC; font-weight: 400; color: #000000; line-height: 22px;\u0026#34;\u0026gt;${COMMENT}\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;a class=\u0026#34;text-wrapper_2 flex-col\u0026#34; style=\u0026#34; min-width: 106px; height: 38px; background: #ef859d38; border-radius: 32px; display: flex; align-items: center; justify-content: center; text-decoration: none; margin: auto; margin-top: 32px;\u0026#34; href=\u0026#34;${POST_URL}\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;text_5\u0026#34; style=\u0026#34; color: #DB214B;\u0026#34;\u0026gt;查看详情\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;text-group_6 flex-col justify-between\u0026#34; style=\u0026#34; display: flex; flex-direction: column; align-items: center; margin-top: 34px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;text_6\u0026#34; style=\u0026#34; height: 17px; font-size: 12px; font-family: PingFangSC-Regular, PingFang SC; font-weight: 400; color: #00000045; line-height: 17px;\u0026#34;\u0026gt;此邮件由评论服务自动发出，直接回复无效。\u0026lt;/span\u0026gt;\u0026lt;a class=\u0026#34;text_7\u0026#34; style=\u0026#34; height: 17px; font-size: 12px; font-family: PingFangSC-Regular, PingFang SC; font-weight: 400; color: #DB214B; line-height: 17px; margin-top: 6px; text-decoration: none;\u0026#34; href=\u0026#34;${SITE_URL}\u0026#34;\u0026gt;前往博客\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt; ","date":"20 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-04-%E8%AF%84%E8%AE%BA%E5%8C%BA%E9%83%A8%E7%BD%B2/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003e评论区部署 \n    \u003cdiv id=\"评论区部署\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e8%af%84%e8%ae%ba%e5%8c%ba%e9%83%a8%e7%bd%b2\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003ebutterfly主题内置了很多评论系统，甚至可以同时部署两个评论系统\n这里因为twikoo可以部署到vercel上，所以我就直接部署twikoo了\u003c/p\u003e","title":"web-04 评论区部署","type":"posts"},{"content":"","date":"20 March 2024","externalUrl":null,"permalink":"/tags/debug/","section":"Tags","summary":"","title":"Debug","type":"tags"},{"content":" 导言 # 众所周知，微信作为一款优秀的国产app，以其离谱的大小著称，且不谈其内置的输入法有多么的离谱，仅仅是微信内置的浏览器就已经技惊四座，作为一个使用CEF(Chromium Embedded Framework (CEF) 是一个基于Google Chromium的开源项目)的软件，它为了减少客户对微信体积过大的怨恨，善良地将浏览器内置的调试工具删除了，导致我们无法对微信内的网页做任何操作，那么有什么办法可以解决呢？\nUser-Agent + Cookie（拉跨） # 微信的User-Agent检查 # 当你尝试用浏览器打开一部分微信内网页时，微信就会善良地提醒你\n这时我们查看网页源代码，就会发现这样一段检查\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, user-scalable=0\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var ua = navigator.userAgent.toLowerCase(); var isWeixin = ua.indexOf(\u0026#39;micromessenger\u0026#39;) != -1; //isWeixin var isAndroid = ua.indexOf(\u0026#39;android\u0026#39;) != -1; var isIos = (ua.indexOf(\u0026#39;iphone\u0026#39;) != -1) || (ua.indexOf(\u0026#39;ipad\u0026#39;) != -1); if (!isWeixin) { document.head.innerHTML = \u0026#39;\u0026lt;title\u0026gt;抱歉，出错了\u0026lt;/title\u0026gt;\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1, user-scalable=0\u0026#34;\u0026gt;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://res.wx.qq.com/open/libs/weui/0.4.1/weui.css\u0026#34;\u0026gt;\u0026#39;; document.body.innerHTML = \u0026#39;\u0026lt;div class=\u0026#34;weui_msg\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;weui_icon_area\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;weui_icon_info weui_icon_msg\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;weui_text_area\u0026#34;\u0026gt;\u0026lt;h4 class=\u0026#34;weui_msg_title\u0026#34;\u0026gt;请在微信客户端打开链接\u0026lt;/h4\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 不难发现isWeixin的检查是看UA里有没有micromessenger，它还善良地开了大小写兼容，我哭死\n于是我在UA里写上MicroMessenger，再刷新\n于是便发现我们确实可以进入网页了，但是为什么一片雪白？\nCookie需求 # 很显然我们没有Cookie来表明自己的身份，人家服务器都不知道我们是谁，怎么给我们推送数据\n（当然一些公共网页不需要身份，是可以自己打开的（也许），但大部分都要Cookie）\n而WeiXin的Cookie有点难获取，需要用fiddle抓包，还不好找，所以不建议这么玩\n直接打入敌人内部（万能） # 很显然微信的开发者肯定需要一个调试的路径，所以我们只要伪装成开发者去调试就行\n直接上过程\n打开手机的USB调试 # 在开发人员选项里有USB调试的相关选项，打开即可，当然要先开启开发人员模式\n连接手机和电脑 # 直接用数据线连起来就行，开启传输文件最佳\n似乎打开了“仅充电”模式下允许ADB调试的话就可以开仅充电\n开启微信的调试模式 # 在手机微信内点击链接\nhttp://debugxweb.qq.com/?inspector=true 如果正常的话就可以看到执行成功的提示\n浏览器启动调试 # 在浏览器内输入相应地址\nChrome输入 chrome://inspect/#devices\nEdge输入 edge://inspect/#decives\n浏览器端就可以看到页面\n手机端则会接到通知，点击确定即可\n开始调试 # 这时在手机端打开一个只能在微信打开的网页，比如一些公众号的功能网页（以青年大学习为例）\n如果理想的话网页端就可以检测到WebView\n点击inspect就可以进入调试页面，本质上调用了edge的调试工具\n这个页面就和直接打开网页没有区别，可以直接在网页上浏览（手机上也会同步浏览）\n也可以直接通过检查和修改元素改变手机上显示的元素\n一些问题情况的解决 # 一般来说只要重复两个动作就能解决大部分问题\n一是开启微信的调试模式\n二是打开手机的USB调试\n找不到设备？ # 如果发现浏览器一直检查不到设备，可以选择下载\nminimal_adb_fastboot_1.4.3_portable.zip - 蓝奏云 (lanzoub.com)\n你可以选择把它放到已经在系统PATH的文件夹里，这样就可以直接调用adb，也可以选择直接指定adb.exe来调用命令 adb devices\n正常的话就会看到该命令开启了一个adb通道\n这时候一般就能在浏览器看到设备了\n结果展示 # 通过选中元素进行调试的方法就能很方便地修改所有元素，比如这里修改了积分\n手机端此时也会同步显示，且由于本质上资源已经被修改了，即使你关掉调试和连接，只要这个页面没有重载，就不会被改回去\n","date":"20 March 2024","externalUrl":null,"permalink":"/posts/tech/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E5%BE%AE%E4%BF%A1%E4%B8%AD%E7%9A%84%E7%BD%91%E9%A1%B5/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003e导言 \n    \u003cdiv id=\"导言\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%af%bc%e8%a8%80\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e众所周知，微信作为一款优秀的国产app，以其离谱的大小著称，且不谈其内置的输入法有多么的离谱，仅仅是微信内置的浏览器就已经技惊四座，作为一个使用CEF(\u003ca href=\"https://www.chromium.org/Home\" target=\"_blank\"\u003eChromium Embedded Framework (CEF)\u003c/a\u003e 是一个基于Google Chromium的开源项目)的软件，它\u003cstrong\u003e为了减少客户对微信体积过大的怨恨，\u003cem\u003e善良\u003c/em\u003e地将浏览器内置的调试工具删除了\u003c/strong\u003e，导致我们无法对微信内的网页做任何操作，那么有什么办法可以解决呢？\u003c/p\u003e","title":"如何调试微信中的网页","type":"posts"},{"content":"","date":"16 March 2024","externalUrl":null,"permalink":"/tags/butterfly/","section":"Tags","summary":"","title":"Butterfly","type":"tags"},{"content":"","date":"16 March 2024","externalUrl":null,"permalink":"/tags/next/","section":"Tags","summary":"","title":"Next","type":"tags"},{"content":" 实践出真知\n边看边调，记录点有意思的东西 学习hexo设计 # hexo本体 # 文档 | Hexo 多看文档总不会错，把自定义下面的内容边看边改就差不多了\n学习主题设计 # butterfly主题 # Butterfly - A Simple and Card UI Design theme for Hexo 简单好使\nNext主题 # Documentation | NexT (theme-next.js.org) next是老牌主题，功能全，但是美观度得靠自己魔改 只是纯英文doc有点难受\n学习主题魔改 # Akilarの糖果屋 - Akilar.top Fomalhaut🥝 还得是前人的智慧有用，只是版本有点旧，得自己重复一遍，抄不了作业\n魔改记录 # 框架已弃用，删除\n","date":"16 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-03-%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e实践出真知\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e边看边调，记录点有意思的东西\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch1 class=\"relative group\"\u003e学习hexo设计 \n    \u003cdiv id=\"学习hexo设计\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%e5%ad%a6%e4%b9%a0hexo%e8%ae%be%e8%ae%a1\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\n\u003ch2 class=\"relative group\"\u003ehexo本体 \n    \u003cdiv id=\"hexo本体\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#hexo%e6%9c%ac%e4%bd%93\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\"\u003e文档 | Hexo\u003c/a\u003e\n多看文档总不会错，把自定义下面的内容边看边改就差不多了\u003c/p\u003e","title":"web-03 网页设计和魔改","type":"posts"},{"content":"","date":"14 March 2024","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"14 March 2024","externalUrl":null,"permalink":"/tags/pages/","section":"Tags","summary":"","title":"Pages","type":"tags"},{"content":"网页放在本地服务器上肯定是毫无价值的，所以我们要将它发布到互联网上 方法有很多，最方便的就是白嫖github pages，缺点就是只能部署静态网页 后续可能会部署到树莓派上\n一键部署 # 一键部署有很多方法，详细见文档部署 | Hexo 我最喜欢的方法是使用git和一个插件\n前置工作 # git相关 git全局信息设置 ssh 和 git-credential http和https可能需要关闭验证机制 安装插件 在根目录使用命令npm install hexo-deployer-git --save一键安装 配置网站 # 首先要修改一些框架的配置 # 找到框架_config.yml里的deploy项，修改为：\ndeploy: type: git repo: \u0026lt;repository url\u0026gt; # 你的项目地址，注意不是下载地址，是下载地址去掉.git branch: [branch] # 决定上传到哪一分支 message: [message] # 可选，上传的message 配置个人仓库 # 个人仓库只能有一个 在github上创建一个repo，取名为\u0026lt;username\u0026gt;.github.io 然后就不用管了，把地址复制下来，这时的地址带有.git后缀，可以选择不复制\n将地址填入框架配置文件里，并将branch设置为master（默认在这个分支创建网页） 当然也可以设置为其他branch，这就需要在github再进行一次配置\n配置项目仓库 # 项目仓库可以有无数个 在github上随便创造一个repo，随便取名 然后就不用管了，但是地址还是要复制下来，注意还是不需要.git后缀\n将地址填入框架配置文件里，并将branch设置为gh-pages（默认在这个分支创建网页） 配置网址 一般来说网址只要配置相应的url即可\n推送到github # 因为我们使用了方便的插件，所以操作很简单\n首先使用hexo clean/hexo cl清理工作目录，这有利于一些变动的应用，可以多多使用，如果你发现某个改变没有应用上，就清理后再生成 然后hexo g生成网页 再然后你可以使用hexo s审视一下自己的网站，也可以不看 最后使用hexo d一键推送到github github设置 # 来到github就能发现文件已经被上传到了仓库中，这时可以进行一些操作\n在仓库的settings里点击Pages，可以调整一些网页生成的选项 修改生成依赖的分支 修改生成依赖的目录（如果你想把框架也上传到同一个仓库） 设置自定义域名（前提是你买了） 在仓库的Actions中可以看到网页生成的进度和历史，如果网页生成出错了，错误报告也到这里看 后续工作 # 如果熟练的话可以选择将框架也放在仓库中 因为很容易发现实际上框架根目录下有一个文件夹.deploy_git,其实这就是上传的内容 但是由于deploy命令具有覆盖性，所以必须要把框架放在另一个branch里 比如创建一个framework的branch，专门保存框架 但是正如之前所言，git的branch不应该完全不同，不然还不如开两个仓库\n最好开另一个仓库保存框架，这样命令行用起来舒服 并且后续可以通过GitHub actions自动部署\n","date":"14 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-02-%E9%83%A8%E7%BD%B2%E7%BD%91%E9%A1%B5/","section":"Posts","summary":"\u003cp\u003e网页放在本地服务器上肯定是毫无价值的，所以我们要将它发布到互联网上\n方法有很多，最方便的就是白嫖github pages，缺点就是只能部署静态网页\n后续可能会部署到树莓派上\u003c/p\u003e","title":"web-02 Github deploy","type":"posts"},{"content":" git学习 # 由于github是基于git的网站，所以熟练运用git是必不可少的 无论你使用什么框架，最后还是要用git上传和部署\nhexo框架安装 # 考虑到与时俱进，直接去hexo官网看文档就行，反正也有中文 文档 | Hexo\n注意前置安装node.js和附属的npm hexo框架部署 # 部署hexo # hexo作为一个框架可以非常方便地根据设计数据生成网站并上传到github 应当将hexo视为一个生成器，可以为其安排一个repo，但是最好不要放在GitHub pages 的repo里，虽然可以指定一个branch生成页面，但是两个branch完全不同是违背git的初衷的，可以考虑为这个框架单独开一个repo 依旧讲究与时俱进，看文档吧 建站 | Hexo\n该文档内介绍了hexo框架下的部分文件夹的作用 基本操作 # 在电脑上挑个喜欢的位置，准备创建一个文件夹储存框架 打开命令行，开始操作 # 跳转到目录位置 cd \u0026#34;\u0026lt;file folder you\u0026#39;d like to put the folder in\u0026gt;\u0026#34; # 创建工作目录 hexo init \u0026lt;folder\u0026gt; # hexo初始化 cd \u0026lt;folder\u0026gt; npm install # 安装npm 配置hexo # 可以自定义配置很多内容，这里只挑出现问题的讲 本质上不用急着配置，到时候准备好设计网站的时候再一起配置 配置 | Hexo\n配置网址 # 众所周知的是github pages创建的静态网站域名有固定的设置，即 \u0026lt;username\u0026gt;.github.io 如果你想要分开部署多个网站，github并不提供三级域名，像 \u0026lt;another name\u0026gt;.\u0026lt;username\u0026gt;.github.io 而是通过域名下级目录的形式实现，即 \u0026lt;username\u0026gt;.github.io/\u0026lt;repo name\u0026gt;\n如果我们依旧以最初仓库的方法部署这个项目仓库的github pages，将会导致css等文件无法读取，网页渲染只剩下字和链接，格式全没了； 而且链接的格式也是错误的，当你点击链接时，会发现原本应该是 \u0026hellip;/\u0026lt;repo name\u0026gt;/\u0026hellip;/index.html 的链接其实是 \u0026hellip;/\u0026hellip;/index.html，根本就没有到项目目录下寻找文件 所以我们需要设置网址相关参数\nurl: 改为指定的github pages的域名 root: 可以不改，目的是解决网站没有部署在根目录上的问题 安装主题 # 方法1——npm(推荐) # npm i hexo-theme-butterfly hexo的主题文件夹将被放在node_modules里\n方法2——git # Themes | Hexo hexo的主题就放在框架目录的themes里面 一般来说主题的发布者都会非常善良地让你一条命令解决问题 只需要呆在根目录，输入\ngit clone \u0026lt;branch and url\u0026gt; themes/\u0026lt;name\u0026gt; 如果要更新主题，进入主题的文件夹然后git pull即可\n安装主题和下载文件没有本质区别，你可以下载多个主题一个一个尝试 当你想要使用某个主题时，只要到hexo框架的_config.yml里修改theme参数即可 这个参数本质上是你下载到themes文件夹里的文件夹名，可以自己取名\n建议 # 在项目的根目录下复制一个butterfly的_config.yml文件并重命名为_config.butterfly.yml 框架将会优先读取根目录下的config,这样方便升级主题版本\nhexo框架使用 # 现在终于可以开始创建第一个网站了，当然现在还只是部署在本地\n开始写作 # 写作 | Hexo hexo写作本质上只是给md（或者其他格式的）文件添加了一些标识而已，在掌握了基本法则后你并没有太大必要调用命令行去生成一个文件再去修改，你可以自己创建文件然后写标识 俗话说，条条大路通罗马，只要结果一样，怎么做是自己的自由\n# 基本方法 hexo new [layout] title # layout默认为post # 这个命令将会在相应的目录生成一个对应layout的文件 # layout本质上就是指定scaffolds文件夹里的模板，这个模板我们可以自己设计 不同的主题有不同的编写方式和显示逻辑，建议多看看主题的文档\n生成网页 # 通过命令hexo generate或者hexo g生成网页\n展示网页 # 通过命令hexo server或hexo s启用本地服务器展示网页 默认的访问网址为http://localhost:4000/，ctrl+点击即可打开 当然当你[[web-01 框架学习#配置网址|配置了特殊网址]]时，这个网址也会随之变化\n","date":"12 March 2024","externalUrl":null,"permalink":"/posts/website/old/web-01-%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/","section":"Posts","summary":"\u003ch1 class=\"relative group\"\u003egit学习 \n    \u003cdiv id=\"git学习\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#git%e5%ad%a6%e4%b9%a0\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h1\u003e\n\u003cp\u003e由于github是基于git的网站，所以熟练运用git是必不可少的\n无论你使用什么框架，最后还是要用git上传和部署\u003c/p\u003e","title":"web-01 hexo框架","type":"posts"},{"content":"你好，我是 GodKe\n这篇文章和我一样大\n","date":"26 February 2004","externalUrl":null,"permalink":"/about/","section":"GodKe.BLOG","summary":"\u003cp\u003e你好，我是 GodKe\u003cbr\u003e\n这篇文章和我一样大\u003c/p\u003e","title":"About Me","type":"page"},{"content":" ","externalUrl":null,"permalink":"/ai/","section":"GodKe.BLOG","summary":"\u003cdiv class=\"ai-chat-container\"\u003e\n    \u003ciframe src=\"https://ai.godke.blog/\" width=\"100%\" height=\"800px\" frameborder=\"0\"\n        style=\"border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15);\" loading=\"lazy\"\u003e\n    \u003c/iframe\u003e\n\u003c/div\u003e","title":"API Forward","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]