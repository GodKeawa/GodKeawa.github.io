<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PATH on GodKe.BLOG</title><link>https://godke.blog/tags/path/</link><description>Recent content in PATH on GodKe.BLOG</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>3601262198@qq.com (GodKe)</managingEditor><webMaster>3601262198@qq.com (GodKe)</webMaster><copyright>Copyright © 2023 GodKe. All Rights Reserved.</copyright><lastBuildDate>Thu, 28 Mar 2024 11:30:51 +0800</lastBuildDate><atom:link href="https://godke.blog/tags/path/index.xml" rel="self" type="application/rss+xml"/><item><title>系统环境变量配置不生效</title><link>https://godke.blog/posts/tech/%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E7%94%9F%E6%95%88/</link><pubDate>Thu, 28 Mar 2024 11:30:51 +0800</pubDate><author>3601262198@qq.com (GodKe)</author><guid>https://godke.blog/posts/tech/%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E4%B8%8D%E7%94%9F%E6%95%88/</guid><description>&lt;p>&lt;strong>重启解决99%的问题&lt;/strong>&lt;/p>
&lt;p>非常值得吐槽的是系统环境变量竟然就存储在一个文件里
在powershell里使用命令&lt;code>$env:Path&lt;/code>即可查看文件内容
你甚至可以通过命令&lt;code>$env:Path += &amp;quot;;&amp;lt;路径&amp;gt;&amp;quot;&lt;/code>来实现对path的增加(&lt;strong>并不全局，见下文&lt;/strong>)&lt;/p>
&lt;p>既然是文件，就会有一个很蛋疼的地方
——对单个软件（或者其他使用path的程序）来说不实时更新&lt;/p>
&lt;p>比如说你打开了一个软件，这个软件需要你把某个路径加入path，这样软件才能正确调用&lt;/p>
&lt;ul>
&lt;li>首先你运行软件，发现报错了，显示找不到可执行文件&lt;/li>
&lt;li>然后你去搜了一下，发现是某个东西没加进path，软件检索不到&lt;/li>
&lt;li>于是你更改了path，但是没有重启软件，再次运行，还是检索不到&lt;/li>
&lt;li>这是因为软件启动时已经将path文件读入了，且不会故意再去读&lt;/li>
&lt;li>所以重启软件就能解决&lt;/li>
&lt;/ul>
&lt;p>但是更为惊喜的是我遇到的情况&lt;/p>
&lt;ul>
&lt;li>众所周知一些软件是可以唤出powershell的，比如我用的github desktop&lt;/li>
&lt;li>原本我认为powershell是单独的软件，启动时应该是自行初始化的&lt;/li>
&lt;li>但事实是，如果你不重启github desktop,无论你重启多少次powershell，这个powershell就是不更新path，甚至你调用&lt;code>$env:Path&lt;/code>方法读取到的内容也没有更新&lt;/li>
&lt;li>也就是说，由软件唤起的powershell会继承软件的一部分数据，包括读取到的path&lt;/li>
&lt;li>而&lt;code>$env:Path&lt;/code>方法并不是读取全局的path&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>经过一些调查可以发现&lt;/strong>
在 Windows 上，环境变量可以在三个作用域内定义：&lt;/p>
&lt;ul>
&lt;li>计算机（或系统）作用域&lt;/li>
&lt;li>用户范围&lt;/li>
&lt;li>流程范围&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Process&lt;/em> 作用域包含当前进程或 PowerShell 会话中可用的环境变量。 该变量列表&lt;strong>继承自父进程&lt;/strong>，并由 &lt;em>Machine&lt;/em> 和 &lt;em>User&lt;/em> 作用域中的变量构造而成。&lt;/p>
&lt;p>&lt;strong>在 PowerShell 中更改环境变量时，更改仅影响当前会话&lt;/strong>。 此行为类似于 Windows 命令外壳中的 &lt;code>set&lt;/code> 命令和基于 UNIX 的环境中的 &lt;code>setenv&lt;/code> 命令的行为。 要更改 Machine 或 User 作用域中的值，必须使用 &lt;strong>System.Environment&lt;/strong> 类的方法。&lt;/p>
&lt;p>要更改计算机作用域的变量，还必须拥有相应权限。 如果你尝试在没有足够权限的情况下更改值，该命令将失败并且 PowerShell 将显示错误。&lt;/p></description></item></channel></rss>